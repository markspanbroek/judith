Exception := Exception |[

  method asText [
    result := self.message
  ]

]|

ExceptionHandler := ExceptionHandler |[

  method try [
    # skip
  ]
  
  method catch [
    # skip
  ]
  
  method finally [
    # skip
  ]

]|

object AssertionFailedException := Exception |[

  method asText[
    if self.message = "" ->
      result := "Assertion failed."
    || true ->
      result := "Assertion failed: " + self.message
    fi
  ]

]|

Object.replace(Object |[

  method assert(assertion) [
    if not assertion ->
      AssertionFailedException.throw
    fi
  ]

]|)

object null := Object.copy

object Function := Object |[ ]|

Number := Number
|[
  method plus(x) [
    self.assert(x : Number)
    result := parent.plus(x)
  ]
  
  # TODO: check parameters of rest of Number's methods
]|

List := List |[

  method get(index) [
    self.assert(index : Number)
    result := parent.get(index)
  ]
  
  method set(index, element) [
    self.assert(index : Number)
    parent.set(index, element)
  ]
  
  method pop [
    self.assert(self.length > 0)
    result := self.get(self.length - 1)
    self.remove(self.length - 1)
  ]
  
  method remove(index) [
    self.assert(0 <= index and index < self.length)
    parent.remove(index)
  ]
  
  
]|

object Objects := Object.copy
