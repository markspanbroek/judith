object null := Object.copy

object Function := Object 
|[ 
    # empty
]|

object Procedure := Object 
|[ 
    # empty
]|

ExceptionHandler := ExceptionHandler
|[
    method try 
    [
        # skip
    ]
  
    method catch(exception) 
    [
        # skip
    ]
  
    method finally 
    [
        # skip
    ]
]|

object AssertionFailedException := Exception 
|[
    method asText
    [
        if self.message = "" 
            result := "Assertion failed."
        || true 
            result := "Assertion failed: " + self.message
        fi
    ]
]|

object Assert := null
[
    object Assertion := Object
    |[
        object subject := null
        
        method setSubject(subject')
        [
            subject := subject'
        ]
        
        method create(subject)
        [
            result := self.copy.setSubject(subject)
        ]

        method isTrue
        [
            if not subject
                AssertionFailedException.throw
            fi
        ]        
        
        method equals(expected)
        [
            if not (expected = subject)
                object message := "Expected '" + expected.asText + "'"
                message := message + " but got '" + subject.asText + "'"
                AssertionFailedException.copy.setMessage(message).throw
            fi
        ]

        method throws(expectedException)
        [
            object exception := null
            ExceptionHandler
            |[
                method try
                [
                    subject.run
                ]
                
                method catch(exception')
                [
                    exception := exception'
                ]
            ]|.run
            
            if not (exception : expectedException)
                object message := "Expected exception to occur"
                AssertionFailedException.copy.setMessage(message).throw
            fi
        ]
        
        method isNotNull
        [
            if subject = null
                object message := "Expected non-null object"
                AssertionFailedException.copy.setMessage(message).throw
            fi
        ]
        
        method isNull
        [
            if not (subject = null)
                object message := "Expected null"
                AssertionFailedException.copy.setMessage(message).throw
            fi
        ]
    ]|

    Assert := Object 
    |[
        method that(assertion) 
        [
            result := Assertion.create(assertion)
        ]
    ]|
]

[
    object Number := Objects.Number
    
    Number.replace(
        Number
        |[
            method plus(x) [
                Assert.that(x : Number).isTrue
                result := parent.plus(x)
            ]
            # TODO: check parameters of rest of Number's methods
        ]|
    )
]

[
    object Text := Objects.Text
    
    Text.replace(
        Text 
        |[
            method excerpt(begin, end)
            [
                Assert.that(0 <= begin and begin < end and end <= self.length).isTrue
                result := parent.excerpt(begin, end)
            ]
            
            method equals(other) 
            [
                if other : Text 
                    result := parent.equals(other)
                || true 
                    result := false
                fi
            ]
            
            method asText
            [
                result := self
            ]
        ]|
    )
]
