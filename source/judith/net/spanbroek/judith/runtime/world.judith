ExceptionHandler := ExceptionHandler
|[
    method try 
    [
        # skip
    ]
  
    method catch(exception) 
    [
        # skip
    ]
  
    method finally 
    [
        # skip
    ]
]|

object AssertionFailedException := Exception 
|[
    method asText
    [
        if self.message = "" 
            result := "Assertion failed."
        || true 
            result := "Assertion failed: " + self.message
        fi
    ]
]|

object Assert := Object 
|[
    method that(assertion) 
    [
        if not assertion 
            AssertionFailedException.throw
        fi
    ]
    
    method equal(expected, actual)
    [
        if not (expected = actual)
            object message := "Expected '" + expected.asText + "'"
            message := message + " but got '" + actual.asText + "'"
            AssertionFailedException.copy.setMessage(message).throw
        fi
    ]
]|

object null := Object.copy

object Function := Object 
|[ 
    # empty
]|

[
    object Number := Objects.Number
    
    Number.replace(
        Number
        |[
            method plus(x) [
                Assert.that(x : Number)
                result := parent.plus(x)
            ]
            # TODO: check parameters of rest of Number's methods
        ]|
    )
]

[
    object Text := Objects.Text
    
    Text.replace(
        Text 
        |[
            method excerpt(begin, end)
            [
                Assert.that(0 <= begin and begin < end and end <= self.length)
                result := parent.excerpt(begin, end)
            ]
            
            method equals(other) 
            [
                if other : Text 
                    result := parent.equals(other)
                || true 
                    result := false
                fi
            ]
            
            method asText
            [
                result := self
            ]
        ]|
    )
]
