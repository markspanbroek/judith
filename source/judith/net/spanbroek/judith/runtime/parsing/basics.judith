[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Parser := Objects.Parsing.Parser
    
    ParserGenerator.replace(ParserGenerator 
    |[

      method alternation(alternatives) [
      
        result := Parser |[ method run(context, index, result, continuation) [
          
          object i := 0
          do i < alternatives.length 
            alternatives.get(i).run(context, index, result, continuation)
            i := i + 1
          od
          
        ] ]|
      
      ]
            
      method concatenation(elements) [
        
        object generator := self

        if elements.length > 0 
        
          result := Parser |[ method run(context, index, result, continuation) [
              
            object tail := elements.copy
            object head := tail.get(0)
            tail.remove(0)
            
            object newcontinuation := Function |[ method run(newindex, newresult) [
            
              object tailparser := generator.concatenation(tail)
              tailparser.run(context, newindex, newresult, continuation)
              
            ] ]|
            
            head.run(context, index, result, newcontinuation)
              
          ] ]|
          
        || true 
        
          result := generator.empty
          
        fi
      
      ]
            
      object end := Parser |[ method run(context, index, result, continuation) [
         
        if index = context.input.length 
          ParserGenerator.empty.run(context, index, result, continuation)
        fi
          
      ] ]|
      
      method end [
      
        result := end
      
      ]
      
      method endBecomes(end') [

        Assert.that(caller : self)
      
        end := end'
      
      ]
      
      method literal(literal) [
      
        result := Parser |[ method run(context, index, result, continuation) [

          if index + literal.length <= context.input.length 
            if context.input.excerpt(index, index + literal.length) = literal 
              continuation.run(index + literal.length, result.copy.push(literal))
            fi
          fi
        
        ] ]|
      
      ]
      
      object never := Parser |[ method run(context, index, result, continuation) [
      
        # skip
      
      ] ]|
      
      method never [
      
        result := never
      
      ]
      
      method neverBecomes(never') [
      
        Assert.that(caller : self)
      
        never := never'
      
      ]
      
      method range(lower, upper) [
      
        result := Parser |[ method run(context, index, result, continuation) [
        
          object character := context.input.excerpt(index, index+1)
          if (lower <= character and character <= upper) 
            continuation.run(index+1, result.copy.push(character))
          fi
        
        ] ]|
        
      ]

      method repetition(operand) [
      
        result := self.alternation(
            List.copy
                .add(self.empty)
                .add(self.repetitionplus(operand))
        )
      
      ]
      
      method repetitionplus(operand) 
      [      
        object generator := self
      
        result := Parser 
        |[ 
            method run(context, index, result, continuation) 
            [
                object newcontinuation := Function 
                |[
                    method run(index, result) 
                    [
                        continuation.run(index, result)
                        generator.repetitionplus(operand).run(context, index, result, continuation)
                    ]
                ]|
        
                operand.run(context, index, result, newcontinuation)
            ]        
        ]|      
      ]
      
      method rule(name) [
      
        result := Parser |[ method run(context, index, result, continuation) [
        
          context.parser.get(name).run(context, index, result, continuation)
        
        ] ]|
      
      ]
      
      method transform(operand, transform) [
      
        result := Parser |[ method run(context, index, result, continuation) [
        
          object newcontinuation := Function |[ method run(newindex, newresult) [
          
            object slice := newresult.slice(result.length, newresult.length)
            continuation.run(newindex, result.copy.push(transform.run(slice)))
          
          ] ]|
          
          operand.run(context, index, result, newcontinuation)
        
        ] ]|
      
      ]
      
    ]|)
    
]
