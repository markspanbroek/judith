[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Parser := Objects.Parsing.Parser

    object ParseResult := Object 
    |[
        object index := null
        object value := null

        method index [
            result := index
        ]

        method setIndex(index') [
            index := index'
        ]

        method value [
            result := value
        ]

        method setValue(value') [
            value := value'
        ]
    ]|

    object CacheEntry := Object 
    |[
        object results := List.copy
        object continuations := List.copy

        method results [ 
            result := results 
        ]

        method continuations [ 
            result := continuations 
        ]
    ]|

    Parser.replace( Parser 
    |[
        method createContext(input)
        [
            object cache := Objects.Dictionary.copy
            
            result := parent.createContext(input)
            |[
                method cache
                [
                    result := cache
                ]
            ]|
        ]
    ]| )

    object Memoizer := Object
    |[
        method createKey(parser, index)
        [
            result := parser.asText + "," + index.asText
        ]
        
        method memoize(parser)
        [
            Assert.that(parser : Parser)
            
            result := Parser 
            |[            
                method run(context, index, result, continuation) 
                [
                    object cache := context.cache
                    object key := Memoizer.createKey(parser, index)
                
                    if (cache.has(key))
                        object entry := cache.get(key)
                  
                        entry.continuations.push(continuation)
                  
                        object iterator := entry.results.copy
                        do iterator.length > 0
                            object current := iterator.pop
                            continuation.run(current.index, current.value)
                        od
                    || true 
                        object entry := CacheEntry.copy
                        cache.set(key, entry)
                  
                        entry.continuations.push(continuation)
                  
                        object newcontinuation := Function 
                        |[ 
                            method run(index, value) [
                   
                                object result := ParseResult.copy
                                result.setIndex(index)
                                result.setValue(value)
                                entry.results.push(result)
                          
                                object iterator := entry.continuations.iterator
                                do iterator.hasNext 
                                    iterator.next.run(index, value)
                                od
                      
                            ] 
                        ]|
                  
                        parser.run(context, index, result, newcontinuation)
                    fi
                ]
          
                method asText 
                [
                    result := parser.asText
                ]        
            ]|      
        ]
    ]|

    ParserGenerator.replace( ParserGenerator 
    |[
        method rule(name) 
        [      
            result := Memoizer.memoize(parent.rule(name))      
        ]
      
        method repetitionplus(operand) 
        [
            result := Memoizer.memoize(parent.repetitionplus(operand))
        ]
    ]| )
]
