[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Text := Objects.Text

    ParserGenerator.replace( ParserGenerator |[

        method begin
        [
            result := parent.begin
            |[
                method asText
                [
                    result := "^"
                ]
            ]|
        ]
        
        method end
        [
            result := parent.end
            |[
                method asText
                [
                    result := "$"
                ]
            ]|
        ]

        method empty
        [
            result := parent.empty
            |[
                method asText
                [
                    result := "()"
                ]
            ]|
        ]
        
        method never
        [
            result := parent.never
            |[
                method asText
                [
                    result := "0"
                ]
            ]|
        ]

      method choice(alternatives) [
      
        object text := "("
        object i := 0
        if i < alternatives.length 
          text := text + alternatives.get(i).asText
          i := i + 1
        fi
        do i < alternatives.length 
          text := text + "|"
          text := text + alternatives.get(i).asText
          i := i + 1
        od
        text := text + ")"

        result := parent.choice(alternatives) |[
        
          method asText [
            result := text
          ]
        
        ]|
      
      ]
      
      method concatenation(elements) [
      
        object text := "("
        
        object i := 0
        do i < elements.length 
            if i > 0 
                text := text + " "
            fi
            text := text + elements.get(i)
            i := i + 1
        od

        text := text + ")"

        result := parent.concatenation(elements) |[
            
          method asText [
            result := text
          ]
        
        ]|
      
      ]
      
      method literal(literal) [
      
        object text := Text.quote + literal + Text.quote
            
        result := parent.literal(literal) |[
        
          method asText [
            result := text
          ]
        
        ]|
      
      ]
      
      method range(lower, upper) [

        object text := "[" + lower + ".." + upper + "]"
            
        result := parent.range(lower, upper) |[

          method asText [
            result := text
          ]
          
        ]|
      
      ]
      
      method not(character) [

        object text := "[~" + character + "]"
            
        result := parent.not(character) |[

          method asText [
            result := text
          ]
          
        ]|
      
      ]

      method optional(operand) [
      
        object text := operand.asText + "?"

        result := parent.optional(operand) |[
        
          method asText [
            result := text
          ]
        
        ]| 
      
      ]

      method repetition(operand) [
      
        object text := operand.asText + "*"

        result := parent.repetition(operand) |[
        
          method asText [
            result := text
          ]
        
        ]| 
      
      ]
      
      method repetitionplus(operand) [
      
        object text := operand.asText + "+"

        result := parent.repetitionplus(operand) |[
        
          method asText [
            result := text
          ]
        
        ]| 
      
      ]
      
      method rule(name) [

        result := parent.rule(name) |[
        
          method asText [
            result := name
          ]
        
        ]|  
      
      ]

      method transform(operand, transform) [
      
        object text := "{" + operand.asText + "}"
      
        result := parent.transform(operand, transform) |[
        
          method asText [
            result := text
          ]
        
        ]|
      
      ]
      
    ]| )
    
]
