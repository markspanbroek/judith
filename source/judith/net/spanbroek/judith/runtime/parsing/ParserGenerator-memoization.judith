[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Parser := Objects.Parsing.Parser

    object ParseResult := Object 
    |[
        object index := null
        object value := null

        method index [
            result := index
        ]

        method setIndex(index') [
            index := index'
        ]

        method value [
            result := value
        ]

        method setValue(value') [
            value := value'
        ]
    ]|

    object CacheEntry := Object 
    |[
        object results := List.copy
        object continuations := List.copy

        method addContinuation(continuation)
        [
            continuations.push(continuation)
            
            self.forwardResultsTo(continuation)
        ]
        
        method addResult(index, value)
        [
            results.push(
                ParseResult
                    .copy
                    .setIndex(index)
                    .setValue(value)                
            )
            
            self.callContinuationsWith(result)
        ]

        method forwardResultsTo(continuation)
        [
            Assert.equal(self, caller)
            
            object iterator := results.copy
            do iterator.length > 0
                object current := iterator.pop
                continuation.run(current.index, current.value)
            od
        ]
        
        method callContinuationsWith(result)
        [
            Assert.equal(self, caller)
        
            object iterator := continuations.copy
            do iterator.length > 0
                object current := iterator.pop
                current.run(result.index, result.value)
            od
        ]
    ]|

    Parser.replace( Parser 
    |[
        method createContext(input)
        [
            object cache := Objects.Dictionary.copy
            
            result := parent.createContext(input)
            |[
                method cache
                [
                    result := cache
                ]
            ]|
        ]
    ]| )

    object Memoizer := Object
    |[
        method createKey(parser, index)
        [
            result := parser.asText + "," + index.asText
        ]
        
        method memoize(parser)
        [
            Assert.that(parser : Parser)
            
            result := Parser 
            |[
                method run(context, index, result, continuation) 
                [
                    object cache := context.cache
                    object key := Memoizer.createKey(parser, index)
                
                    if (cache.has(key))
                    
                        cache.get(key).addContinuation(continuation)
                        
                    || true 
                    
                        object entry := CacheEntry.copy
                        cache.set(key, entry)
                  
                        entry.addContinuation(continuation)

                        object newcontinuation := Function 
                        |[ 
                            method run(index, value)
                            [
                                entry.addResult(index, value)
                            ] 
                        ]|
                  
                        parser.run(context, index, result, newcontinuation)
                        
                    fi
                ]
          
                method asText 
                [
                    result := parser.asText
                ]        
            ]|
        ]
    ]|

    ParserGenerator.replace( ParserGenerator 
    |[
        method rule(name) 
        [      
            result := Memoizer.memoize(parent.rule(name))      
        ]
      
        method repetitionplus(operand) 
        [
            result := Memoizer.memoize(parent.repetitionplus(operand))
        ]
    ]| )
]
