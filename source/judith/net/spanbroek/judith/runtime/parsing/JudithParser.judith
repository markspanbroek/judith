[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Grammar := Objects.Parsing.Grammar

    object parser := Grammar.copy
    object g := ParserGenerator.copy

    parser.addRule("program",
      g.concatenation(List.copy
        .add(g.empty)
        .add(g.end)
      )
    )
    
#PENDING
#    parser.addRule("program", 
#      g.concatenation(List.copy
#        .add(g.rule("w"))
#        .add(g.rule("statements"))
#        .add(g.rule("w"))
#        .add(g.end))
#    )
    
#    parser.addRule("statements",
#      #todo
#    )
    
#    parser.addRule("w",
#      g.repetition(
#        g.alternation(List.copy
#          .add(g.literal(" "))
#          # todo
#        )
#      )
#    )
    
    parser.setDefaultRule("program")
    
    Objects.Parsing.replace(
      Objects.Parsing
      |[
          method JudithParser
          [
              result := parser
          ]
      ]|
    )
]
