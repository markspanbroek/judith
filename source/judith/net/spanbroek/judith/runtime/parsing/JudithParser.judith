[
    object ParserGenerator := Objects.Parsing.ParserGenerator
    object Grammar := Objects.Parsing.Grammar
    object Text := Objects.Text

    object parser := Grammar.copy
    object g := ParserGenerator.copy

    parser.addRule("program", 
      g.concatenation(List.copy
        .add(g.rule("w"))
        .add(g.rule("statements"))
        .add(g.rule("w"))
        .add(g.end))
    )
    
    parser.addRule("statements",
      g.optional(
        g.concatenation(List.copy
          .add(g.rule("statement"))
          .add(
            g.repetition(
              g.concatenation(List.copy
                .add(g.rule("w"))
                .add(g.rule("statement"))
              )
            )
          )
        )
      )
    )

   parser.addRule("statement",
      g.alternation(List.copy
        .add(g.rule("object"))
        .add(g.rule("assignment"))
        .add(g.rule("if"))
        .add(g.rule("do"))
        .add(g.rule("methodcall"))
        .add(g.rule("block"))
      )
    )
    
    parser.addRule("object",
      g.concatenation(List.copy
        .add(g.literal("object"))
        .add(g.rule("w"))
        .add(g.rule("identifier"))
        .add(g.rule("w"))
        .add(g.literal(":="))
        .add(g.rule("w"))
        .add(g.rule("expression"))
      )
    )

    parser.addRule("assignment",
      g.concatenation(List.copy
        .add(g.rule("identifier"))
        .add(g.rule("w"))
        .add(g.literal(":="))
        .add(g.rule("w"))
        .add(g.rule("expression"))
      )
    )

    parser.addRule("if",
      g.concatenation(List.copy
        .add(g.literal("if"))
        .add(g.rule("w"))
        .add(g.rule("conditionals"))
        .add(g.rule("w"))
        .add(g.literal("fi"))
      )
    )

    parser.addRule("do",
      g.concatenation(List.copy
        .add(g.literal("do"))
        .add(g.rule("w"))
        .add(g.rule("conditionals"))
        .add(g.rule("w"))
        .add(g.literal("od"))
      )
    )

    parser.addRule("conditionals",
      g.concatenation(List.copy
        .add(g.rule("conditional"))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.literal("||"))
              .add(g.rule("w"))
              .add(g.rule("conditional"))
            )
          )
        )
      )
    )

    parser.addRule("conditional",
      g.concatenation(List.copy
        .add(g.rule("expression"))
        .add(g.rule("w"))
        .add(g.rule("statements"))
      )
    )
    
    parser.addRule("block",
      g.concatenation(List.copy
        .add(g.literal("["))
        .add(g.rule("w"))
        .add(g.rule("statements"))
        .add(g.rule("w"))
        .add(g.literal("]"))
      )
    )
    
    parser.addRule("expression",
      g.concatenation(List.copy
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.rule("expression"))
              .add(g.rule("w"))
              .add(
                g.alternation(List.copy
                  .add(g.literal("and"))
                  .add(g.literal("or"))
                )
              )
              .add(g.rule("w"))
            )
          )
        )
        .add(g.rule("expression1"))
      )
    )

    parser.addRule("expression1",
      g.concatenation(List.copy
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.rule("expression1"))
              .add(g.rule("w"))
              .add(
                g.alternation(List.copy
                  .add(g.literal("="))
                  .add(g.literal("<="))
                  .add(g.literal(">="))
                  .add(g.literal("<"))
                  .add(g.literal(">"))
                  .add(g.literal(":"))
                )
              )
              .add(g.rule("w"))
            )
          )
        )
        .add(g.rule("expression2"))
      )
    )    
    
    parser.addRule("expression2",
      g.concatenation(List.copy
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.rule("expression2"))
              .add(g.rule("w"))
              .add(
                g.alternation(List.copy
                  .add(g.literal("+"))
                  .add(g.literal("-"))
                )
              )
              .add(g.rule("w"))
            )
          )
        )
        .add(g.rule("expression3"))
      )
    )    

    parser.addRule("expression3",
      g.concatenation(List.copy
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.rule("expression3"))
              .add(g.rule("w"))
              .add(
                g.alternation(List.copy
                  .add(g.literal("*"))
                  .add(g.literal("/"))
                )
              )
              .add(g.rule("w"))
            )
          )
        )
        .add(g.rule("expression4"))
      )
    )

    parser.addRule("expression4",
      g.concatenation(List.copy
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.rule("expression4"))
              .add(g.rule("w"))
              .add(g.literal("^"))
              .add(g.rule("w"))
            )
          )
        )
        .add(g.rule("expression5"))
      )
    )

    parser.addRule("expression5",
      g.alternation(List.copy
        .add(
          g.concatenation(List.copy
            .add(
              g.alternation(List.copy
                .add(g.literal("not"))
                .add(g.literal("-"))
              )
            )
            .add(g.rule("w"))
            .add(g.rule("expression5"))
          )
        )
        .add(g.rule("expression6"))
      )
    )

    parser.addRule("expression6",
      g.alternation(List.copy
        .add(g.rule("methodcall"))
        .add(g.rule("alteration"))
        .add(g.rule("expression7"))
      )
    )

    parser.addRule("expression7",
      g.alternation(List.copy
        .add(g.rule("block"))
        .add(g.rule("lambda"))
        .add(g.rule("lambdablock"))
        .add(g.rule("expression8"))
      )
    )

    parser.addRule("expression8",
      g.alternation(List.copy
        .add(g.rule("braces"))
        .add(g.rule("identifier"))
        .add(g.rule("text"))
        .add(g.rule("number"))
        .add(g.rule("boolean"))
      )
    )

    parser.addRule("methodcall",
      g.concatenation(List.copy
        .add(g.rule("expression6"))
        .add(g.literal("."))
        .add(g.rule("identifier"))
        .add(
          g.optional(
            g.rule("expressions")
          )
        )
      )
    )

    parser.addRule("expressions",
      g.concatenation(List.copy
        .add(g.literal("("))
        .add(g.rule("w"))
        .add(g.rule("expression"))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.literal(","))
              .add(g.rule("w"))
              .add(g.rule("expression"))
            )
          )
        )
        .add(g.rule("w"))
        .add(g.literal(")"))
      )
    )

    parser.addRule("alteration",
      g.concatenation(List.copy
        .add(g.rule("expression6"))
        .add(g.rule("w"))
        .add(g.literal("|["))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.alternation(List.copy
                .add(g.rule("object"))
                .add(g.rule("method"))
              ))
            )
          )
        )
        .add(g.rule("w"))
        .add(g.literal("]|"))
      )
    )
    
    parser.addRule("lambda",
      g.concatenation(List.copy
        .add(g.literal("("))
        .add(g.rule("w"))
        .add(g.rule("identifier"))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.literal(","))
              .add(g.rule("w"))
              .add(g.rule("identifier"))
            )
          )
        )
        .add(g.rule("w"))
        .add(g.literal("->"))
        .add(g.rule("w"))
        .add(g.rule("expression"))
        .add(g.rule("w"))
        .add(g.literal(")"))
      )
    )
    
    parser.addRule("lambdablock",
      g.concatenation(List.copy
        .add(g.literal("["))
        .add(g.rule("w"))
        .add(g.rule("identifier"))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.literal(","))
              .add(g.rule("w"))
              .add(g.rule("identifier"))
            )
          )
        )
        .add(g.rule("w"))
        .add(g.literal("->"))
        .add(g.rule("w"))
        .add(g.rule("expression"))
        .add(g.rule("w"))
        .add(g.literal("]"))
      )
    )
    
    parser.addRule("braces",
      g.concatenation(List.copy
        .add(g.literal("("))
        .add(g.rule("w"))
        .add(g.rule("expression"))
        .add(g.rule("w"))
        .add(g.literal(")"))
      )
    )
    
    parser.addRule("method",
      g.concatenation(List.copy
        .add(g.literal("method"))
        .add(g.rule("w"))
        .add(g.rule("identifier"))
        .add(
          g.optional(
            g.rule("identifiers")
          )
        )
        .add(g.rule("w"))
        .add(g.literal("["))
        .add(g.rule("w"))
        .add(g.rule("statements"))
        .add(g.rule("w"))
        .add(g.literal("]"))
      )
    )

    parser.addRule("identifiers",
      g.concatenation(List.copy
        .add(g.literal("("))
        .add(g.rule("w"))
        .add(g.rule("identifier"))
        .add(
          g.repetition(
            g.concatenation(List.copy
              .add(g.rule("w"))
              .add(g.literal(","))
              .add(g.rule("w"))
              .add(g.rule("identifier"))
            )
          )
        )
        .add(g.rule("w"))
        .add(g.literal(")"))
      )
    )
    
    parser.addRule("boolean",
      g.alternation(List.copy
        .add(g.literal("true"))
        .add(g.literal("false"))
      )
    )

    parser.addRule("number",
      g.concatenation(List.copy
        .add(
          g.repetitionplus(
            g.rule("digit")
          )
        )
        .add(
          g.optional(
            g.concatenation(List.copy
              .add(g.literal("."))
              .add(
                g.repetitionplus(
                  g.rule("digit")
                )
              )
            )
          )
        )
      )
    )

    parser.addRule("text",
      g.concatenation(List.copy
        .add(g.literal(Text.quote))
        .add(
          g.repetition(
            g.not(Text.quote)
          )
        )
        .add(g.literal(Text.quote))
      )
    )
    
    parser.addRule("identifier",
      g.concatenation(List.copy
        .add(
          g.repetition(
            g.rule("digit")
          )
        )
        .add(g.rule("letter"))
        .add(
          g.repetition(
            g.alternation(List.copy
              .add(g.rule("digit"))
              .add(g.rule("letter"))
            )
          )
        )
      )
    )
    
    parser.addRule("digit",
      g.range("0","9")
    )
    
    parser.addRule("letter",
      g.alternation(List.copy
        .add(g.range("a","z"))
        .add(g.range("A","Z"))
        .add(g.literal("_"))
        .add(g.literal("'"))
      )
    )
    
    parser.addRule("w",
      g.repetition(
        g.alternation(List.copy
          .add(g.literal(" "))
          .add(g.literal(Text.lineEnd))
          .add(g.rule("comment"))
        )
      )
    )

    parser.addRule("comment",
      g.concatenation(List.copy
        .add(g.literal("#"))
        .add(
          g.repetition(
            g.not(Text.lineEnd)
          )
        )
      )
    )

    parser.setDefaultRule("program")
    
    Objects.Parsing.replace(
      Objects.Parsing
      |[
          method JudithParser
          [
              result := parser
          ]
      ]|
    )
]
