object AssertTests := Object |[

  method doesNotThrowOnTrue 
  [
    Assert.that(true)
  ] 
  
  method throwsOnFalse 
  [
    object exception := null
    
    ExceptionHandler |[
      method try 
      [
        Assert.that(false)
      ]
      method catch(exception')
      [
        exception := exception'
      ]
    ]|.run
    
    if not (exception : AssertionFailedException)
      AssertionFailedException.throw
    fi
  ]
  
  method throwsWhenNotEqual
  [
    object exception := null
    
    ExceptionHandler |[    
        method try
        [
            Assert.equal(1, 2)
        ]
        method catch(exception')
        [
            exception := exception'
        ]
    ]|.run
    
    Assert.that(exception : AssertionFailedException)
  ]
  
  method doesNotThrowWhenEqual
  [
    Assert.equal(1,1)
  ]
  
  method descibesWhatsWrongWhenNotEqual
  [
    ExceptionHandler |[    
        method try
        [
            Assert.equal(1, 2)
        ]
        method catch(exception)
        [
            Assert.equal("Expected '1' but got '2'", exception.message)
        ]
    ]|.run
  ]
  
  method callsProcedureThatIsPassedToThrows
  [
      object wasRun := false
      Assert.throws(Exception, [ wasRun := true Exception.throw ])
      Assert.that(wasRun)
  ]
  
  method catchesExceptionWhenExpected
  [
      Assert.throws(Exception, [ Exception.throw ])
  ]
  
  method throwsExceptionWhenExpectedExceptionDidNotOccur
  [
      object wasThrown := false
      ExceptionHandler
      |[
          method try
          [
              Assert.throws(Exception, [])
          ]
          
          method catch(exception)
          [
              wasThrown := true
          ]
      ]|.run
      
      Assert.that(wasThrown)
  ]

  method throwsExceptionWhenExceptionOfWrongTypeOccurs
  [
      object wasThrown := false
      ExceptionHandler
      |[
          method try
          [
              Assert.throws(AssertionFailedException, [ Exception.throw])
          ]
          
          method catch(exception)
          [
              wasThrown := true
          ]
      ]|.run
      
      Assert.that(wasThrown)
  ]
]|

AssertTests
  .doesNotThrowOnTrue
  .throwsOnFalse
  .throwsWhenNotEqual
  .doesNotThrowWhenEqual
  .descibesWhatsWrongWhenNotEqual
  .callsProcedureThatIsPassedToThrows
  .catchesExceptionWhenExpected
  .throwsExceptionWhenExpectedExceptionDidNotOccur
  .throwsExceptionWhenExceptionOfWrongTypeOccurs
