object AssertTests := Object |[

    method doesNotThrowOnTrue
    [
        Assert.that(true).isTrue
    ]

    method throwsOnFalse 
    [
        object exception := null

        ExceptionHandler |[
            method try 
            [
                Assert.that(false).isTrue
            ]
            method catch(exception')
            [
                exception := exception'
            ]
        ]|.run

        if not (exception : AssertionFailedException)
            AssertionFailedException.throw
        fi
    ]

    method throwsWhenNotEqual
    [
        object exception := null

        ExceptionHandler |[
            method try
            [
                Assert.that(2).equals(1)
            ]
            method catch(exception')
            [
                exception := exception'
            ]
        ]|.run

        Assert.that(exception : AssertionFailedException)
    ]

    method doesNotThrowWhenEqual
    [
        Assert.that(1).equals(1)
    ]

    method descibesWhatsWrongWhenNotEqual
    [
        ExceptionHandler |[
            method try
            [
                Assert.that(2).equals(1)
            ]
            method catch(exception)
            [
                Assert.that(exception.message).equals("Expected '1' but got '2'")
            ]
        ]|.run
    ]

    method executesCommandThatIsPassedToThrows
    [
        object wasExecuted := false
        Assert.that([ wasExecuted := true Exception.throw ]).throws(Exception)
        Assert.that(wasExecuted).isTrue
    ]

    method catchesExceptionWhenExpected
    [
        Assert.that([ Exception.throw ]).throws(Exception)
    ]

    method throwsExceptionWhenExpectedExceptionDidNotOccur
    [
        object wasThrown := false
        ExceptionHandler
        |[
            method try
            [
                Assert.that([]).throws(Exception)
            ]

            method catch(exception)
            [
                wasThrown := true
            ]
        ]|.run

        Assert.that(wasThrown).isTrue
    ]

    method throwsExceptionWhenExceptionOfWrongTypeOccurs
    [
        object wasThrown := false
        ExceptionHandler
        |[
            method try
            [
                Assert.that([ Exception.throw ]).throws(AssertionFailedException)
            ]

            method catch(exception)
            [
                wasThrown := true
            ]
        ]|.run

        Assert.that(wasThrown).isTrue
    ]

    method throwsWhenNull
    [
        Assert
          .that([ Assert.that(null).isNotNull ])
          .throws(AssertionFailedException)
    ]

    method throwsWhenNotNull
    [
        Assert
          .that([ Assert.that(Object).isNull ])
          .throws(AssertionFailedException)
    ]

    method throwsWhenEqual
    [
        Assert
          .that([ Assert.that(1).isNotEqualTo(1) ])
          .throws(AssertionFailedException)
    ]

    method doesNotThrowWhenNotEqual
    [
        Assert.that(1).isNotEqualTo(2)
    ]

    method descibesWhatsWrongWhenEqual
    [
        ExceptionHandler |[
            method try
            [
                Assert.that(1).isNotEqualTo(1)
            ]
            method catch(exception)
            [
                Assert.that(exception.message).equals("Unexpected '1'")
            ]
        ]|.run
    ]
]|

AssertTests
  .doesNotThrowOnTrue
  .throwsOnFalse
  .throwsWhenNotEqual
  .doesNotThrowWhenEqual
  .descibesWhatsWrongWhenNotEqual
  .executesCommandThatIsPassedToThrows
  .catchesExceptionWhenExpected
  .throwsExceptionWhenExpectedExceptionDidNotOccur
  .throwsExceptionWhenExceptionOfWrongTypeOccurs
  .throwsWhenNull
  .throwsWhenNotNull
  .throwsWhenEqual
  .doesNotThrowWhenNotEqual
  .descibesWhatsWrongWhenEqual
