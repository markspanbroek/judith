/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.analysis;

import java.util.*;
import net.spanbroek.judith.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseALanguage(ALanguage node)
    {
        defaultCase(node);
    }

    public void caseAMultipleStatements(AMultipleStatements node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStatements(AEmptyStatements node)
    {
        defaultCase(node);
    }

    public void caseAObjectStatement(AObjectStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseADoStatement(ADoStatement node)
    {
        defaultCase(node);
    }

    public void caseAMethodcallStatement(AMethodcallStatement node)
    {
        defaultCase(node);
    }

    public void caseAObject(AObject node)
    {
        defaultCase(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        defaultCase(node);
    }

    public void caseAIf(AIf node)
    {
        defaultCase(node);
    }

    public void caseADo(ADo node)
    {
        defaultCase(node);
    }

    public void caseAMultipleConditionals(AMultipleConditionals node)
    {
        defaultCase(node);
    }

    public void caseASingleConditionals(ASingleConditionals node)
    {
        defaultCase(node);
    }

    public void caseAConditional(AConditional node)
    {
        defaultCase(node);
    }

    public void caseAAndExpression(AAndExpression node)
    {
        defaultCase(node);
    }

    public void caseAOrExpression(AOrExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression(ASimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAEqualsExpression1(AEqualsExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAAtmostExpression1(AAtmostExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAAtleastExpression1(AAtleastExpression1 node)
    {
        defaultCase(node);
    }

    public void caseALessthanExpression1(ALessthanExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAMorethanExpression1(AMorethanExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAColonExpression1(AColonExpression1 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression1(ASimpleExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression2(APlusExpression2 node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression2(AMinusExpression2 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression2(ASimpleExpression2 node)
    {
        defaultCase(node);
    }

    public void caseAStarExpression3(AStarExpression3 node)
    {
        defaultCase(node);
    }

    public void caseASlashExpression3(ASlashExpression3 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression3(ASimpleExpression3 node)
    {
        defaultCase(node);
    }

    public void caseACarrotExpression4(ACarrotExpression4 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression4(ASimpleExpression4 node)
    {
        defaultCase(node);
    }

    public void caseANotExpression5(ANotExpression5 node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression5(AMinusExpression5 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression5(ASimpleExpression5 node)
    {
        defaultCase(node);
    }

    public void caseAMethodcallExpression6(AMethodcallExpression6 node)
    {
        defaultCase(node);
    }

    public void caseAAlterationExpression6(AAlterationExpression6 node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression6(ASimpleExpression6 node)
    {
        defaultCase(node);
    }

    public void caseABracesExpression7(ABracesExpression7 node)
    {
        defaultCase(node);
    }

    public void caseALiteralExpression7(ALiteralExpression7 node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression7(AIdentifierExpression7 node)
    {
        defaultCase(node);
    }

    public void caseAParametersMethodcall(AParametersMethodcall node)
    {
        defaultCase(node);
    }

    public void caseASimpleMethodcall(ASimpleMethodcall node)
    {
        defaultCase(node);
    }

    public void caseAExpressions(AExpressions node)
    {
        defaultCase(node);
    }

    public void caseAMultipleExpressionlist(AMultipleExpressionlist node)
    {
        defaultCase(node);
    }

    public void caseASingleExpressionlist(ASingleExpressionlist node)
    {
        defaultCase(node);
    }

    public void caseAAlteration(AAlteration node)
    {
        defaultCase(node);
    }

    public void caseAMultipleAlterationparts(AMultipleAlterationparts node)
    {
        defaultCase(node);
    }

    public void caseASingleAlterationparts(ASingleAlterationparts node)
    {
        defaultCase(node);
    }

    public void caseAObjectAlterationpart(AObjectAlterationpart node)
    {
        defaultCase(node);
    }

    public void caseAMethodAlterationpart(AMethodAlterationpart node)
    {
        defaultCase(node);
    }

    public void caseABraces(ABraces node)
    {
        defaultCase(node);
    }

    public void caseATextLiteral(ATextLiteral node)
    {
        defaultCase(node);
    }

    public void caseANumberLiteral(ANumberLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAParametersMethod(AParametersMethod node)
    {
        defaultCase(node);
    }

    public void caseASimpleMethod(ASimpleMethod node)
    {
        defaultCase(node);
    }

    public void caseAIdentifiers(AIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAMultipleIdentifierlist(AMultipleIdentifierlist node)
    {
        defaultCase(node);
    }

    public void caseASingleIdentifierlist(ASingleIdentifierlist node)
    {
        defaultCase(node);
    }

    public void caseTAndsym(TAndsym node)
    {
        defaultCase(node);
    }

    public void caseTDosym(TDosym node)
    {
        defaultCase(node);
    }

    public void caseTFisym(TFisym node)
    {
        defaultCase(node);
    }

    public void caseTIfsym(TIfsym node)
    {
        defaultCase(node);
    }

    public void caseTMethodsym(TMethodsym node)
    {
        defaultCase(node);
    }

    public void caseTNotsym(TNotsym node)
    {
        defaultCase(node);
    }

    public void caseTObjectsym(TObjectsym node)
    {
        defaultCase(node);
    }

    public void caseTOdsym(TOdsym node)
    {
        defaultCase(node);
    }

    public void caseTOrsym(TOrsym node)
    {
        defaultCase(node);
    }

    public void caseTAtleast(TAtleast node)
    {
        defaultCase(node);
    }

    public void caseTAtmost(TAtmost node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTBecomes(TBecomes node)
    {
        defaultCase(node);
    }

    public void caseTClosebrace(TClosebrace node)
    {
        defaultCase(node);
    }

    public void caseTClosebracket(TClosebracket node)
    {
        defaultCase(node);
    }

    public void caseTCloseobject(TCloseobject node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    public void caseTLessthan(TLessthan node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMorethan(TMorethan node)
    {
        defaultCase(node);
    }

    public void caseTOpenbrace(TOpenbrace node)
    {
        defaultCase(node);
    }

    public void caseTOpenbracket(TOpenbracket node)
    {
        defaultCase(node);
    }

    public void caseTOpenobject(TOpenobject node)
    {
        defaultCase(node);
    }

    public void caseTPipes(TPipes node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTPower(TPower node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTIdentifierbrace(TIdentifierbrace node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTText(TText node)
    {
        defaultCase(node);
    }

    public void caseTW(TW node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
