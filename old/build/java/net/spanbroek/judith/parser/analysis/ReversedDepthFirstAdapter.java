/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.analysis;

import net.spanbroek.judith.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPLanguage().apply(this);
        outStart(node);
    }

    public void inALanguage(ALanguage node)
    {
        defaultIn(node);
    }

    public void outALanguage(ALanguage node)
    {
        defaultOut(node);
    }

    public void caseALanguage(ALanguage node)
    {
        inALanguage(node);
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        outALanguage(node);
    }

    public void inAMultipleStatements(AMultipleStatements node)
    {
        defaultIn(node);
    }

    public void outAMultipleStatements(AMultipleStatements node)
    {
        defaultOut(node);
    }

    public void caseAMultipleStatements(AMultipleStatements node)
    {
        inAMultipleStatements(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        outAMultipleStatements(node);
    }

    public void inAEmptyStatements(AEmptyStatements node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatements(AEmptyStatements node)
    {
        defaultOut(node);
    }

    public void caseAEmptyStatements(AEmptyStatements node)
    {
        inAEmptyStatements(node);
        outAEmptyStatements(node);
    }

    public void inAObjectStatement(AObjectStatement node)
    {
        defaultIn(node);
    }

    public void outAObjectStatement(AObjectStatement node)
    {
        defaultOut(node);
    }

    public void caseAObjectStatement(AObjectStatement node)
    {
        inAObjectStatement(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        outAObjectStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inADoStatement(ADoStatement node)
    {
        defaultIn(node);
    }

    public void outADoStatement(ADoStatement node)
    {
        defaultOut(node);
    }

    public void caseADoStatement(ADoStatement node)
    {
        inADoStatement(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outADoStatement(node);
    }

    public void inAMethodcallStatement(AMethodcallStatement node)
    {
        defaultIn(node);
    }

    public void outAMethodcallStatement(AMethodcallStatement node)
    {
        defaultOut(node);
    }

    public void caseAMethodcallStatement(AMethodcallStatement node)
    {
        inAMethodcallStatement(node);
        if(node.getMethodcall() != null)
        {
            node.getMethodcall().apply(this);
        }
        outAMethodcallStatement(node);
    }

    public void inAObject(AObject node)
    {
        defaultIn(node);
    }

    public void outAObject(AObject node)
    {
        defaultOut(node);
    }

    public void caseAObject(AObject node)
    {
        inAObject(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBecomes() != null)
        {
            node.getBecomes().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getObjectsym() != null)
        {
            node.getObjectsym().apply(this);
        }
        outAObject(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBecomes() != null)
        {
            node.getBecomes().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignment(node);
    }

    public void inAIf(AIf node)
    {
        defaultIn(node);
    }

    public void outAIf(AIf node)
    {
        defaultOut(node);
    }

    public void caseAIf(AIf node)
    {
        inAIf(node);
        if(node.getFisym() != null)
        {
            node.getFisym().apply(this);
        }
        if(node.getConditionals() != null)
        {
            node.getConditionals().apply(this);
        }
        if(node.getIfsym() != null)
        {
            node.getIfsym().apply(this);
        }
        outAIf(node);
    }

    public void inADo(ADo node)
    {
        defaultIn(node);
    }

    public void outADo(ADo node)
    {
        defaultOut(node);
    }

    public void caseADo(ADo node)
    {
        inADo(node);
        if(node.getOdsym() != null)
        {
            node.getOdsym().apply(this);
        }
        if(node.getConditionals() != null)
        {
            node.getConditionals().apply(this);
        }
        if(node.getDosym() != null)
        {
            node.getDosym().apply(this);
        }
        outADo(node);
    }

    public void inAMultipleConditionals(AMultipleConditionals node)
    {
        defaultIn(node);
    }

    public void outAMultipleConditionals(AMultipleConditionals node)
    {
        defaultOut(node);
    }

    public void caseAMultipleConditionals(AMultipleConditionals node)
    {
        inAMultipleConditionals(node);
        if(node.getConditional() != null)
        {
            node.getConditional().apply(this);
        }
        if(node.getPipes() != null)
        {
            node.getPipes().apply(this);
        }
        if(node.getConditionals() != null)
        {
            node.getConditionals().apply(this);
        }
        outAMultipleConditionals(node);
    }

    public void inASingleConditionals(ASingleConditionals node)
    {
        defaultIn(node);
    }

    public void outASingleConditionals(ASingleConditionals node)
    {
        defaultOut(node);
    }

    public void caseASingleConditionals(ASingleConditionals node)
    {
        inASingleConditionals(node);
        if(node.getConditional() != null)
        {
            node.getConditional().apply(this);
        }
        outASingleConditionals(node);
    }

    public void inAConditional(AConditional node)
    {
        defaultIn(node);
    }

    public void outAConditional(AConditional node)
    {
        defaultOut(node);
    }

    public void caseAConditional(AConditional node)
    {
        inAConditional(node);
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAConditional(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getAndsym() != null)
        {
            node.getAndsym().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getOrsym() != null)
        {
            node.getOrsym().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOrExpression(node);
    }

    public void inASimpleExpression(ASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression(ASimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression(ASimpleExpression node)
    {
        inASimpleExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outASimpleExpression(node);
    }

    public void inAEqualsExpression1(AEqualsExpression1 node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpression1(AEqualsExpression1 node)
    {
        defaultOut(node);
    }

    public void caseAEqualsExpression1(AEqualsExpression1 node)
    {
        inAEqualsExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAEqualsExpression1(node);
    }

    public void inAAtmostExpression1(AAtmostExpression1 node)
    {
        defaultIn(node);
    }

    public void outAAtmostExpression1(AAtmostExpression1 node)
    {
        defaultOut(node);
    }

    public void caseAAtmostExpression1(AAtmostExpression1 node)
    {
        inAAtmostExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getAtmost() != null)
        {
            node.getAtmost().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAAtmostExpression1(node);
    }

    public void inAAtleastExpression1(AAtleastExpression1 node)
    {
        defaultIn(node);
    }

    public void outAAtleastExpression1(AAtleastExpression1 node)
    {
        defaultOut(node);
    }

    public void caseAAtleastExpression1(AAtleastExpression1 node)
    {
        inAAtleastExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getAtleast() != null)
        {
            node.getAtleast().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAAtleastExpression1(node);
    }

    public void inALessthanExpression1(ALessthanExpression1 node)
    {
        defaultIn(node);
    }

    public void outALessthanExpression1(ALessthanExpression1 node)
    {
        defaultOut(node);
    }

    public void caseALessthanExpression1(ALessthanExpression1 node)
    {
        inALessthanExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getLessthan() != null)
        {
            node.getLessthan().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outALessthanExpression1(node);
    }

    public void inAMorethanExpression1(AMorethanExpression1 node)
    {
        defaultIn(node);
    }

    public void outAMorethanExpression1(AMorethanExpression1 node)
    {
        defaultOut(node);
    }

    public void caseAMorethanExpression1(AMorethanExpression1 node)
    {
        inAMorethanExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getMorethan() != null)
        {
            node.getMorethan().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAMorethanExpression1(node);
    }

    public void inAColonExpression1(AColonExpression1 node)
    {
        defaultIn(node);
    }

    public void outAColonExpression1(AColonExpression1 node)
    {
        defaultOut(node);
    }

    public void caseAColonExpression1(AColonExpression1 node)
    {
        inAColonExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAColonExpression1(node);
    }

    public void inASimpleExpression1(ASimpleExpression1 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression1(ASimpleExpression1 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression1(ASimpleExpression1 node)
    {
        inASimpleExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outASimpleExpression1(node);
    }

    public void inAPlusExpression2(APlusExpression2 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression2(APlusExpression2 node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression2(APlusExpression2 node)
    {
        inAPlusExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAPlusExpression2(node);
    }

    public void inAMinusExpression2(AMinusExpression2 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression2(AMinusExpression2 node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression2(AMinusExpression2 node)
    {
        inAMinusExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAMinusExpression2(node);
    }

    public void inASimpleExpression2(ASimpleExpression2 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression2(ASimpleExpression2 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression2(ASimpleExpression2 node)
    {
        inASimpleExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outASimpleExpression2(node);
    }

    public void inAStarExpression3(AStarExpression3 node)
    {
        defaultIn(node);
    }

    public void outAStarExpression3(AStarExpression3 node)
    {
        defaultOut(node);
    }

    public void caseAStarExpression3(AStarExpression3 node)
    {
        inAStarExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAStarExpression3(node);
    }

    public void inASlashExpression3(ASlashExpression3 node)
    {
        defaultIn(node);
    }

    public void outASlashExpression3(ASlashExpression3 node)
    {
        defaultOut(node);
    }

    public void caseASlashExpression3(ASlashExpression3 node)
    {
        inASlashExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outASlashExpression3(node);
    }

    public void inASimpleExpression3(ASimpleExpression3 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression3(ASimpleExpression3 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression3(ASimpleExpression3 node)
    {
        inASimpleExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outASimpleExpression3(node);
    }

    public void inACarrotExpression4(ACarrotExpression4 node)
    {
        defaultIn(node);
    }

    public void outACarrotExpression4(ACarrotExpression4 node)
    {
        defaultOut(node);
    }

    public void caseACarrotExpression4(ACarrotExpression4 node)
    {
        inACarrotExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outACarrotExpression4(node);
    }

    public void inASimpleExpression4(ASimpleExpression4 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression4(ASimpleExpression4 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression4(ASimpleExpression4 node)
    {
        inASimpleExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outASimpleExpression4(node);
    }

    public void inANotExpression5(ANotExpression5 node)
    {
        defaultIn(node);
    }

    public void outANotExpression5(ANotExpression5 node)
    {
        defaultOut(node);
    }

    public void caseANotExpression5(ANotExpression5 node)
    {
        inANotExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getNotsym() != null)
        {
            node.getNotsym().apply(this);
        }
        outANotExpression5(node);
    }

    public void inAMinusExpression5(AMinusExpression5 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression5(AMinusExpression5 node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression5(AMinusExpression5 node)
    {
        inAMinusExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusExpression5(node);
    }

    public void inASimpleExpression5(ASimpleExpression5 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression5(ASimpleExpression5 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression5(ASimpleExpression5 node)
    {
        inASimpleExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outASimpleExpression5(node);
    }

    public void inAMethodcallExpression6(AMethodcallExpression6 node)
    {
        defaultIn(node);
    }

    public void outAMethodcallExpression6(AMethodcallExpression6 node)
    {
        defaultOut(node);
    }

    public void caseAMethodcallExpression6(AMethodcallExpression6 node)
    {
        inAMethodcallExpression6(node);
        if(node.getMethodcall() != null)
        {
            node.getMethodcall().apply(this);
        }
        outAMethodcallExpression6(node);
    }

    public void inAAlterationExpression6(AAlterationExpression6 node)
    {
        defaultIn(node);
    }

    public void outAAlterationExpression6(AAlterationExpression6 node)
    {
        defaultOut(node);
    }

    public void caseAAlterationExpression6(AAlterationExpression6 node)
    {
        inAAlterationExpression6(node);
        if(node.getAlteration() != null)
        {
            node.getAlteration().apply(this);
        }
        outAAlterationExpression6(node);
    }

    public void inASimpleExpression6(ASimpleExpression6 node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression6(ASimpleExpression6 node)
    {
        defaultOut(node);
    }

    public void caseASimpleExpression6(ASimpleExpression6 node)
    {
        inASimpleExpression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outASimpleExpression6(node);
    }

    public void inABracesExpression7(ABracesExpression7 node)
    {
        defaultIn(node);
    }

    public void outABracesExpression7(ABracesExpression7 node)
    {
        defaultOut(node);
    }

    public void caseABracesExpression7(ABracesExpression7 node)
    {
        inABracesExpression7(node);
        if(node.getBraces() != null)
        {
            node.getBraces().apply(this);
        }
        outABracesExpression7(node);
    }

    public void inALiteralExpression7(ALiteralExpression7 node)
    {
        defaultIn(node);
    }

    public void outALiteralExpression7(ALiteralExpression7 node)
    {
        defaultOut(node);
    }

    public void caseALiteralExpression7(ALiteralExpression7 node)
    {
        inALiteralExpression7(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralExpression7(node);
    }

    public void inAIdentifierExpression7(AIdentifierExpression7 node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression7(AIdentifierExpression7 node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression7(AIdentifierExpression7 node)
    {
        inAIdentifierExpression7(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression7(node);
    }

    public void inAParametersMethodcall(AParametersMethodcall node)
    {
        defaultIn(node);
    }

    public void outAParametersMethodcall(AParametersMethodcall node)
    {
        defaultOut(node);
    }

    public void caseAParametersMethodcall(AParametersMethodcall node)
    {
        inAParametersMethodcall(node);
        if(node.getExpressions() != null)
        {
            node.getExpressions().apply(this);
        }
        if(node.getIdentifierbrace() != null)
        {
            node.getIdentifierbrace().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAParametersMethodcall(node);
    }

    public void inASimpleMethodcall(ASimpleMethodcall node)
    {
        defaultIn(node);
    }

    public void outASimpleMethodcall(ASimpleMethodcall node)
    {
        defaultOut(node);
    }

    public void caseASimpleMethodcall(ASimpleMethodcall node)
    {
        inASimpleMethodcall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outASimpleMethodcall(node);
    }

    public void inAExpressions(AExpressions node)
    {
        defaultIn(node);
    }

    public void outAExpressions(AExpressions node)
    {
        defaultOut(node);
    }

    public void caseAExpressions(AExpressions node)
    {
        inAExpressions(node);
        if(node.getClosebrace() != null)
        {
            node.getClosebrace().apply(this);
        }
        if(node.getExpressionlist() != null)
        {
            node.getExpressionlist().apply(this);
        }
        outAExpressions(node);
    }

    public void inAMultipleExpressionlist(AMultipleExpressionlist node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpressionlist(AMultipleExpressionlist node)
    {
        defaultOut(node);
    }

    public void caseAMultipleExpressionlist(AMultipleExpressionlist node)
    {
        inAMultipleExpressionlist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpressions() != null)
        {
            node.getExpressions().apply(this);
        }
        outAMultipleExpressionlist(node);
    }

    public void inASingleExpressionlist(ASingleExpressionlist node)
    {
        defaultIn(node);
    }

    public void outASingleExpressionlist(ASingleExpressionlist node)
    {
        defaultOut(node);
    }

    public void caseASingleExpressionlist(ASingleExpressionlist node)
    {
        inASingleExpressionlist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASingleExpressionlist(node);
    }

    public void inAAlteration(AAlteration node)
    {
        defaultIn(node);
    }

    public void outAAlteration(AAlteration node)
    {
        defaultOut(node);
    }

    public void caseAAlteration(AAlteration node)
    {
        inAAlteration(node);
        if(node.getCloseobject() != null)
        {
            node.getCloseobject().apply(this);
        }
        if(node.getAlterationparts() != null)
        {
            node.getAlterationparts().apply(this);
        }
        if(node.getOpenobject() != null)
        {
            node.getOpenobject().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAAlteration(node);
    }

    public void inAMultipleAlterationparts(AMultipleAlterationparts node)
    {
        defaultIn(node);
    }

    public void outAMultipleAlterationparts(AMultipleAlterationparts node)
    {
        defaultOut(node);
    }

    public void caseAMultipleAlterationparts(AMultipleAlterationparts node)
    {
        inAMultipleAlterationparts(node);
        if(node.getAlterationpart() != null)
        {
            node.getAlterationpart().apply(this);
        }
        if(node.getAlterationparts() != null)
        {
            node.getAlterationparts().apply(this);
        }
        outAMultipleAlterationparts(node);
    }

    public void inASingleAlterationparts(ASingleAlterationparts node)
    {
        defaultIn(node);
    }

    public void outASingleAlterationparts(ASingleAlterationparts node)
    {
        defaultOut(node);
    }

    public void caseASingleAlterationparts(ASingleAlterationparts node)
    {
        inASingleAlterationparts(node);
        if(node.getAlterationpart() != null)
        {
            node.getAlterationpart().apply(this);
        }
        outASingleAlterationparts(node);
    }

    public void inAObjectAlterationpart(AObjectAlterationpart node)
    {
        defaultIn(node);
    }

    public void outAObjectAlterationpart(AObjectAlterationpart node)
    {
        defaultOut(node);
    }

    public void caseAObjectAlterationpart(AObjectAlterationpart node)
    {
        inAObjectAlterationpart(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        outAObjectAlterationpart(node);
    }

    public void inAMethodAlterationpart(AMethodAlterationpart node)
    {
        defaultIn(node);
    }

    public void outAMethodAlterationpart(AMethodAlterationpart node)
    {
        defaultOut(node);
    }

    public void caseAMethodAlterationpart(AMethodAlterationpart node)
    {
        inAMethodAlterationpart(node);
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMethodAlterationpart(node);
    }

    public void inABraces(ABraces node)
    {
        defaultIn(node);
    }

    public void outABraces(ABraces node)
    {
        defaultOut(node);
    }

    public void caseABraces(ABraces node)
    {
        inABraces(node);
        if(node.getClosebrace() != null)
        {
            node.getClosebrace().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOpenbrace() != null)
        {
            node.getOpenbrace().apply(this);
        }
        outABraces(node);
    }

    public void inATextLiteral(ATextLiteral node)
    {
        defaultIn(node);
    }

    public void outATextLiteral(ATextLiteral node)
    {
        defaultOut(node);
    }

    public void caseATextLiteral(ATextLiteral node)
    {
        inATextLiteral(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextLiteral(node);
    }

    public void inANumberLiteral(ANumberLiteral node)
    {
        defaultIn(node);
    }

    public void outANumberLiteral(ANumberLiteral node)
    {
        defaultOut(node);
    }

    public void caseANumberLiteral(ANumberLiteral node)
    {
        inANumberLiteral(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inAParametersMethod(AParametersMethod node)
    {
        defaultIn(node);
    }

    public void outAParametersMethod(AParametersMethod node)
    {
        defaultOut(node);
    }

    public void caseAParametersMethod(AParametersMethod node)
    {
        inAParametersMethod(node);
        if(node.getClosebracket() != null)
        {
            node.getClosebracket().apply(this);
        }
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        if(node.getOpenbracket() != null)
        {
            node.getOpenbracket().apply(this);
        }
        if(node.getIdentifiers() != null)
        {
            node.getIdentifiers().apply(this);
        }
        if(node.getIdentifierbrace() != null)
        {
            node.getIdentifierbrace().apply(this);
        }
        if(node.getMethodsym() != null)
        {
            node.getMethodsym().apply(this);
        }
        outAParametersMethod(node);
    }

    public void inASimpleMethod(ASimpleMethod node)
    {
        defaultIn(node);
    }

    public void outASimpleMethod(ASimpleMethod node)
    {
        defaultOut(node);
    }

    public void caseASimpleMethod(ASimpleMethod node)
    {
        inASimpleMethod(node);
        if(node.getClosebracket() != null)
        {
            node.getClosebracket().apply(this);
        }
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        if(node.getOpenbracket() != null)
        {
            node.getOpenbracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMethodsym() != null)
        {
            node.getMethodsym().apply(this);
        }
        outASimpleMethod(node);
    }

    public void inAIdentifiers(AIdentifiers node)
    {
        defaultIn(node);
    }

    public void outAIdentifiers(AIdentifiers node)
    {
        defaultOut(node);
    }

    public void caseAIdentifiers(AIdentifiers node)
    {
        inAIdentifiers(node);
        if(node.getClosebrace() != null)
        {
            node.getClosebrace().apply(this);
        }
        if(node.getIdentifierlist() != null)
        {
            node.getIdentifierlist().apply(this);
        }
        outAIdentifiers(node);
    }

    public void inAMultipleIdentifierlist(AMultipleIdentifierlist node)
    {
        defaultIn(node);
    }

    public void outAMultipleIdentifierlist(AMultipleIdentifierlist node)
    {
        defaultOut(node);
    }

    public void caseAMultipleIdentifierlist(AMultipleIdentifierlist node)
    {
        inAMultipleIdentifierlist(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifierlist() != null)
        {
            node.getIdentifierlist().apply(this);
        }
        outAMultipleIdentifierlist(node);
    }

    public void inASingleIdentifierlist(ASingleIdentifierlist node)
    {
        defaultIn(node);
    }

    public void outASingleIdentifierlist(ASingleIdentifierlist node)
    {
        defaultOut(node);
    }

    public void caseASingleIdentifierlist(ASingleIdentifierlist node)
    {
        inASingleIdentifierlist(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleIdentifierlist(node);
    }
}
