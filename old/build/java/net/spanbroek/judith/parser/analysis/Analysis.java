/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.analysis;

import net.spanbroek.judith.parser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseALanguage(ALanguage node);
    void caseAMultipleStatements(AMultipleStatements node);
    void caseAEmptyStatements(AEmptyStatements node);
    void caseAObjectStatement(AObjectStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseADoStatement(ADoStatement node);
    void caseAMethodcallStatement(AMethodcallStatement node);
    void caseAObject(AObject node);
    void caseAAssignment(AAssignment node);
    void caseAIf(AIf node);
    void caseADo(ADo node);
    void caseAMultipleConditionals(AMultipleConditionals node);
    void caseASingleConditionals(ASingleConditionals node);
    void caseAConditional(AConditional node);
    void caseAAndExpression(AAndExpression node);
    void caseAOrExpression(AOrExpression node);
    void caseASimpleExpression(ASimpleExpression node);
    void caseAEqualsExpression1(AEqualsExpression1 node);
    void caseAAtmostExpression1(AAtmostExpression1 node);
    void caseAAtleastExpression1(AAtleastExpression1 node);
    void caseALessthanExpression1(ALessthanExpression1 node);
    void caseAMorethanExpression1(AMorethanExpression1 node);
    void caseAColonExpression1(AColonExpression1 node);
    void caseASimpleExpression1(ASimpleExpression1 node);
    void caseAPlusExpression2(APlusExpression2 node);
    void caseAMinusExpression2(AMinusExpression2 node);
    void caseASimpleExpression2(ASimpleExpression2 node);
    void caseAStarExpression3(AStarExpression3 node);
    void caseASlashExpression3(ASlashExpression3 node);
    void caseASimpleExpression3(ASimpleExpression3 node);
    void caseACarrotExpression4(ACarrotExpression4 node);
    void caseASimpleExpression4(ASimpleExpression4 node);
    void caseANotExpression5(ANotExpression5 node);
    void caseAMinusExpression5(AMinusExpression5 node);
    void caseASimpleExpression5(ASimpleExpression5 node);
    void caseAMethodcallExpression6(AMethodcallExpression6 node);
    void caseAAlterationExpression6(AAlterationExpression6 node);
    void caseASimpleExpression6(ASimpleExpression6 node);
    void caseABracesExpression7(ABracesExpression7 node);
    void caseALiteralExpression7(ALiteralExpression7 node);
    void caseAIdentifierExpression7(AIdentifierExpression7 node);
    void caseAParametersMethodcall(AParametersMethodcall node);
    void caseASimpleMethodcall(ASimpleMethodcall node);
    void caseAExpressions(AExpressions node);
    void caseAMultipleExpressionlist(AMultipleExpressionlist node);
    void caseASingleExpressionlist(ASingleExpressionlist node);
    void caseAAlteration(AAlteration node);
    void caseAMultipleAlterationparts(AMultipleAlterationparts node);
    void caseASingleAlterationparts(ASingleAlterationparts node);
    void caseAObjectAlterationpart(AObjectAlterationpart node);
    void caseAMethodAlterationpart(AMethodAlterationpart node);
    void caseABraces(ABraces node);
    void caseATextLiteral(ATextLiteral node);
    void caseANumberLiteral(ANumberLiteral node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseAParametersMethod(AParametersMethod node);
    void caseASimpleMethod(ASimpleMethod node);
    void caseAIdentifiers(AIdentifiers node);
    void caseAMultipleIdentifierlist(AMultipleIdentifierlist node);
    void caseASingleIdentifierlist(ASingleIdentifierlist node);

    void caseTAndsym(TAndsym node);
    void caseTDosym(TDosym node);
    void caseTFisym(TFisym node);
    void caseTIfsym(TIfsym node);
    void caseTMethodsym(TMethodsym node);
    void caseTNotsym(TNotsym node);
    void caseTObjectsym(TObjectsym node);
    void caseTOdsym(TOdsym node);
    void caseTOrsym(TOrsym node);
    void caseTAtleast(TAtleast node);
    void caseTAtmost(TAtmost node);
    void caseTArrow(TArrow node);
    void caseTBecomes(TBecomes node);
    void caseTClosebrace(TClosebrace node);
    void caseTClosebracket(TClosebracket node);
    void caseTCloseobject(TCloseobject node);
    void caseTColon(TColon node);
    void caseTComma(TComma node);
    void caseTDivide(TDivide node);
    void caseTDot(TDot node);
    void caseTEquals(TEquals node);
    void caseTLessthan(TLessthan node);
    void caseTMinus(TMinus node);
    void caseTMorethan(TMorethan node);
    void caseTOpenbrace(TOpenbrace node);
    void caseTOpenbracket(TOpenbracket node);
    void caseTOpenobject(TOpenobject node);
    void caseTPipes(TPipes node);
    void caseTPlus(TPlus node);
    void caseTPower(TPower node);
    void caseTTimes(TTimes node);
    void caseTBoolean(TBoolean node);
    void caseTIdentifier(TIdentifier node);
    void caseTIdentifierbrace(TIdentifierbrace node);
    void caseTNumber(TNumber node);
    void caseTText(TText node);
    void caseTW(TW node);
    void caseEOF(EOF node);
}
