/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.parser;

import net.spanbroek.judith.parser.lexer.*;
import net.spanbroek.judith.parser.node.*;
import net.spanbroek.judith.parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(1), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(1), node, true); } break;
                    case 3: { Node node = new3(); push(goTo(2), node, true); } break;
                    case 4: { Node node = new4(); push(goTo(2), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(2), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(2), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(2), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(3), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(4), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(5), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(6), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(7), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(7), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(8), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(9), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(9), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(9), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(10), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(10), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(10), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(10), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(10), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(10), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(10), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(11), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(11), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(11), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(12), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(12), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(12), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(13), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(13), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(14), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(14), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(14), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(15), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(15), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(15), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(16), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(16), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(16), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(17), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(17), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(18), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(19), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(19), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(20), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(21), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(21), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(22), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(22), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(23), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(24), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(24), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(24), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(25), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(25), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(26), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(27), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(27), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PLanguage node1 = (PLanguage) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        PStatements node1 = (PStatements) pop();
        ALanguage node = new ALanguage(node1);
        return node;
    }

    Node new1()
    {
        PStatement node2 = (PStatement) pop();
        PStatements node1 = (PStatements) pop();
        AMultipleStatements node = new AMultipleStatements(node1, node2);
        return node;
    }

    Node new2()
    {
        AEmptyStatements node = new AEmptyStatements();
        return node;
    }

    Node new3()
    {
        PObject node1 = (PObject) pop();
        AObjectStatement node = new AObjectStatement(node1);
        return node;
    }

    Node new4()
    {
        PAssignment node1 = (PAssignment) pop();
        AAssignmentStatement node = new AAssignmentStatement(node1);
        return node;
    }

    Node new5()
    {
        PIf node1 = (PIf) pop();
        AIfStatement node = new AIfStatement(node1);
        return node;
    }

    Node new6()
    {
        PDo node1 = (PDo) pop();
        ADoStatement node = new ADoStatement(node1);
        return node;
    }

    Node new7()
    {
        PMethodcall node1 = (PMethodcall) pop();
        AMethodcallStatement node = new AMethodcallStatement(node1);
        return node;
    }

    Node new8()
    {
        PExpression node4 = (PExpression) pop();
        TBecomes node3 = (TBecomes) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TObjectsym node1 = (TObjectsym) pop();
        AObject node = new AObject(node1, node2, node3, node4);
        return node;
    }

    Node new9()
    {
        PExpression node3 = (PExpression) pop();
        TBecomes node2 = (TBecomes) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AAssignment node = new AAssignment(node1, node2, node3);
        return node;
    }

    Node new10()
    {
        TFisym node3 = (TFisym) pop();
        PConditionals node2 = (PConditionals) pop();
        TIfsym node1 = (TIfsym) pop();
        AIf node = new AIf(node1, node2, node3);
        return node;
    }

    Node new11()
    {
        TOdsym node3 = (TOdsym) pop();
        PConditionals node2 = (PConditionals) pop();
        TDosym node1 = (TDosym) pop();
        ADo node = new ADo(node1, node2, node3);
        return node;
    }

    Node new12()
    {
        PConditional node3 = (PConditional) pop();
        TPipes node2 = (TPipes) pop();
        PConditionals node1 = (PConditionals) pop();
        AMultipleConditionals node = new AMultipleConditionals(node1, node2, node3);
        return node;
    }

    Node new13()
    {
        PConditional node1 = (PConditional) pop();
        ASingleConditionals node = new ASingleConditionals(node1);
        return node;
    }

    Node new14()
    {
        PStatements node3 = (PStatements) pop();
        TArrow node2 = (TArrow) pop();
        PExpression node1 = (PExpression) pop();
        AConditional node = new AConditional(node1, node2, node3);
        return node;
    }

    Node new15()
    {
        PExpression1 node3 = (PExpression1) pop();
        TAndsym node2 = (TAndsym) pop();
        PExpression node1 = (PExpression) pop();
        AAndExpression node = new AAndExpression(node1, node2, node3);
        return node;
    }

    Node new16()
    {
        PExpression1 node3 = (PExpression1) pop();
        TOrsym node2 = (TOrsym) pop();
        PExpression node1 = (PExpression) pop();
        AOrExpression node = new AOrExpression(node1, node2, node3);
        return node;
    }

    Node new17()
    {
        PExpression1 node1 = (PExpression1) pop();
        ASimpleExpression node = new ASimpleExpression(node1);
        return node;
    }

    Node new18()
    {
        PExpression2 node3 = (PExpression2) pop();
        TEquals node2 = (TEquals) pop();
        PExpression1 node1 = (PExpression1) pop();
        AEqualsExpression1 node = new AEqualsExpression1(node1, node2, node3);
        return node;
    }

    Node new19()
    {
        PExpression2 node3 = (PExpression2) pop();
        TAtmost node2 = (TAtmost) pop();
        PExpression1 node1 = (PExpression1) pop();
        AAtmostExpression1 node = new AAtmostExpression1(node1, node2, node3);
        return node;
    }

    Node new20()
    {
        PExpression2 node3 = (PExpression2) pop();
        TAtleast node2 = (TAtleast) pop();
        PExpression1 node1 = (PExpression1) pop();
        AAtleastExpression1 node = new AAtleastExpression1(node1, node2, node3);
        return node;
    }

    Node new21()
    {
        PExpression2 node3 = (PExpression2) pop();
        TLessthan node2 = (TLessthan) pop();
        PExpression1 node1 = (PExpression1) pop();
        ALessthanExpression1 node = new ALessthanExpression1(node1, node2, node3);
        return node;
    }

    Node new22()
    {
        PExpression2 node3 = (PExpression2) pop();
        TMorethan node2 = (TMorethan) pop();
        PExpression1 node1 = (PExpression1) pop();
        AMorethanExpression1 node = new AMorethanExpression1(node1, node2, node3);
        return node;
    }

    Node new23()
    {
        PExpression2 node3 = (PExpression2) pop();
        TColon node2 = (TColon) pop();
        PExpression1 node1 = (PExpression1) pop();
        AColonExpression1 node = new AColonExpression1(node1, node2, node3);
        return node;
    }

    Node new24()
    {
        PExpression2 node1 = (PExpression2) pop();
        ASimpleExpression1 node = new ASimpleExpression1(node1);
        return node;
    }

    Node new25()
    {
        PExpression3 node3 = (PExpression3) pop();
        TPlus node2 = (TPlus) pop();
        PExpression2 node1 = (PExpression2) pop();
        APlusExpression2 node = new APlusExpression2(node1, node2, node3);
        return node;
    }

    Node new26()
    {
        PExpression3 node3 = (PExpression3) pop();
        TMinus node2 = (TMinus) pop();
        PExpression2 node1 = (PExpression2) pop();
        AMinusExpression2 node = new AMinusExpression2(node1, node2, node3);
        return node;
    }

    Node new27()
    {
        PExpression3 node1 = (PExpression3) pop();
        ASimpleExpression2 node = new ASimpleExpression2(node1);
        return node;
    }

    Node new28()
    {
        PExpression4 node3 = (PExpression4) pop();
        TTimes node2 = (TTimes) pop();
        PExpression3 node1 = (PExpression3) pop();
        AStarExpression3 node = new AStarExpression3(node1, node2, node3);
        return node;
    }

    Node new29()
    {
        PExpression4 node3 = (PExpression4) pop();
        TDivide node2 = (TDivide) pop();
        PExpression3 node1 = (PExpression3) pop();
        ASlashExpression3 node = new ASlashExpression3(node1, node2, node3);
        return node;
    }

    Node new30()
    {
        PExpression4 node1 = (PExpression4) pop();
        ASimpleExpression3 node = new ASimpleExpression3(node1);
        return node;
    }

    Node new31()
    {
        PExpression5 node3 = (PExpression5) pop();
        TPower node2 = (TPower) pop();
        PExpression4 node1 = (PExpression4) pop();
        ACarrotExpression4 node = new ACarrotExpression4(node1, node2, node3);
        return node;
    }

    Node new32()
    {
        PExpression5 node1 = (PExpression5) pop();
        ASimpleExpression4 node = new ASimpleExpression4(node1);
        return node;
    }

    Node new33()
    {
        PExpression5 node2 = (PExpression5) pop();
        TNotsym node1 = (TNotsym) pop();
        ANotExpression5 node = new ANotExpression5(node1, node2);
        return node;
    }

    Node new34()
    {
        PExpression5 node2 = (PExpression5) pop();
        TMinus node1 = (TMinus) pop();
        AMinusExpression5 node = new AMinusExpression5(node1, node2);
        return node;
    }

    Node new35()
    {
        PExpression6 node1 = (PExpression6) pop();
        ASimpleExpression5 node = new ASimpleExpression5(node1);
        return node;
    }

    Node new36()
    {
        PMethodcall node1 = (PMethodcall) pop();
        AMethodcallExpression6 node = new AMethodcallExpression6(node1);
        return node;
    }

    Node new37()
    {
        PAlteration node1 = (PAlteration) pop();
        AAlterationExpression6 node = new AAlterationExpression6(node1);
        return node;
    }

    Node new38()
    {
        PExpression7 node1 = (PExpression7) pop();
        ASimpleExpression6 node = new ASimpleExpression6(node1);
        return node;
    }

    Node new39()
    {
        PBraces node1 = (PBraces) pop();
        ABracesExpression7 node = new ABracesExpression7(node1);
        return node;
    }

    Node new40()
    {
        PLiteral node1 = (PLiteral) pop();
        ALiteralExpression7 node = new ALiteralExpression7(node1);
        return node;
    }

    Node new41()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierExpression7 node = new AIdentifierExpression7(node1);
        return node;
    }

    Node new42()
    {
        PExpressions node4 = (PExpressions) pop();
        TIdentifierbrace node3 = (TIdentifierbrace) pop();
        TDot node2 = (TDot) pop();
        PExpression6 node1 = (PExpression6) pop();
        AParametersMethodcall node = new AParametersMethodcall(node1, node2, node3, node4);
        return node;
    }

    Node new43()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TDot node2 = (TDot) pop();
        PExpression6 node1 = (PExpression6) pop();
        ASimpleMethodcall node = new ASimpleMethodcall(node1, node2, node3);
        return node;
    }

    Node new44()
    {
        TClosebrace node2 = (TClosebrace) pop();
        PExpressionlist node1 = (PExpressionlist) pop();
        AExpressions node = new AExpressions(node1, node2);
        return node;
    }

    Node new45()
    {
        PExpression node3 = (PExpression) pop();
        TComma node2 = (TComma) pop();
        PExpressions node1 = (PExpressions) pop();
        AMultipleExpressionlist node = new AMultipleExpressionlist(node1, node2, node3);
        return node;
    }

    Node new46()
    {
        PExpression node1 = (PExpression) pop();
        ASingleExpressionlist node = new ASingleExpressionlist(node1);
        return node;
    }

    Node new47()
    {
        TCloseobject node4 = (TCloseobject) pop();
        PAlterationparts node3 = (PAlterationparts) pop();
        TOpenobject node2 = (TOpenobject) pop();
        PExpression6 node1 = (PExpression6) pop();
        AAlteration node = new AAlteration(node1, node2, node3, node4);
        return node;
    }

    Node new48()
    {
        PAlterationpart node2 = (PAlterationpart) pop();
        PAlterationparts node1 = (PAlterationparts) pop();
        AMultipleAlterationparts node = new AMultipleAlterationparts(node1, node2);
        return node;
    }

    Node new49()
    {
        PAlterationpart node1 = (PAlterationpart) pop();
        ASingleAlterationparts node = new ASingleAlterationparts(node1);
        return node;
    }

    Node new50()
    {
        PObject node1 = (PObject) pop();
        AObjectAlterationpart node = new AObjectAlterationpart(node1);
        return node;
    }

    Node new51()
    {
        PMethod node1 = (PMethod) pop();
        AMethodAlterationpart node = new AMethodAlterationpart(node1);
        return node;
    }

    Node new52()
    {
        TClosebrace node3 = (TClosebrace) pop();
        PExpression node2 = (PExpression) pop();
        TOpenbrace node1 = (TOpenbrace) pop();
        ABraces node = new ABraces(node1, node2, node3);
        return node;
    }

    Node new53()
    {
        TText node1 = (TText) pop();
        ATextLiteral node = new ATextLiteral(node1);
        return node;
    }

    Node new54()
    {
        TNumber node1 = (TNumber) pop();
        ANumberLiteral node = new ANumberLiteral(node1);
        return node;
    }

    Node new55()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanLiteral node = new ABooleanLiteral(node1);
        return node;
    }

    Node new56()
    {
        TClosebracket node6 = (TClosebracket) pop();
        PStatements node5 = (PStatements) pop();
        TOpenbracket node4 = (TOpenbracket) pop();
        PIdentifiers node3 = (PIdentifiers) pop();
        TIdentifierbrace node2 = (TIdentifierbrace) pop();
        TMethodsym node1 = (TMethodsym) pop();
        AParametersMethod node = new AParametersMethod(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new57()
    {
        TClosebracket node5 = (TClosebracket) pop();
        PStatements node4 = (PStatements) pop();
        TOpenbracket node3 = (TOpenbracket) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TMethodsym node1 = (TMethodsym) pop();
        ASimpleMethod node = new ASimpleMethod(node1, node2, node3, node4, node5);
        return node;
    }

    Node new58()
    {
        TClosebrace node2 = (TClosebrace) pop();
        PIdentifierlist node1 = (PIdentifierlist) pop();
        AIdentifiers node = new AIdentifiers(node1, node2);
        return node;
    }

    Node new59()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TComma node2 = (TComma) pop();
        PIdentifierlist node1 = (PIdentifierlist) pop();
        AMultipleIdentifierlist node = new AMultipleIdentifierlist(node1, node2, node3);
        return node;
    }

    Node new60()
    {
        TIdentifier node1 = (TIdentifier) pop();
        ASingleIdentifierlist node = new ASingleIdentifierlist(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 1}, {36, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 3}, {3, SHIFT, 4}, {6, SHIFT, 5}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 8}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 3}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 4}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 5}, {32, SHIFT, 36}, },
			{{-1, ERROR, 6}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 41}, {12, SHIFT, 38}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 16}, {19, SHIFT, 39}, {26, SHIFT, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 7}, {19, REDUCE, 36}, {26, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 22}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 23}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 25}, {7, SHIFT, 43}, {27, SHIFT, 44}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 27}, {0, SHIFT, 45}, {8, SHIFT, 46}, {11, SHIFT, 47}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 48}, {10, SHIFT, 49}, {16, SHIFT, 50}, {20, SHIFT, 51}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 24}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 27}, {18, SHIFT, 56}, {30, SHIFT, 57}, },
			{{-1, REDUCE, 30}, {29, SHIFT, 58}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 35}, {19, SHIFT, 39}, {26, SHIFT, 40}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 35}, {2, SHIFT, 59}, {27, SHIFT, 44}, },
			{{-1, ERROR, 36}, {12, SHIFT, 60}, },
			{{-1, ERROR, 37}, {0, SHIFT, 45}, {8, SHIFT, 46}, {13, SHIFT, 61}, },
			{{-1, ERROR, 38}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 39}, {32, SHIFT, 63}, {33, SHIFT, 64}, },
			{{-1, ERROR, 40}, {4, SHIFT, 65}, {6, SHIFT, 5}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 44}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 45}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 46}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 48}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 49}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 50}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 51}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 52}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 53}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 54}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 55}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 56}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 57}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 58}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 60}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 45}, {8, SHIFT, 46}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 64}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, ERROR, 65}, {32, SHIFT, 89}, {33, SHIFT, 90}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 67}, {4, SHIFT, 65}, {6, SHIFT, 5}, {15, SHIFT, 91}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, {9, SHIFT, 48}, {10, SHIFT, 49}, {16, SHIFT, 50}, {20, SHIFT, 51}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 16}, {9, SHIFT, 48}, {10, SHIFT, 49}, {16, SHIFT, 50}, {20, SHIFT, 51}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 14}, {1, SHIFT, 3}, {3, SHIFT, 4}, {6, SHIFT, 5}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 8}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 20}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 19}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 23}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 18}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 21}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 22}, {22, SHIFT, 54}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 26}, {18, SHIFT, 56}, {30, SHIFT, 57}, },
			{{-1, REDUCE, 25}, {18, SHIFT, 56}, {30, SHIFT, 57}, },
			{{-1, REDUCE, 29}, {29, SHIFT, 58}, },
			{{-1, REDUCE, 28}, {29, SHIFT, 58}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 45}, {8, SHIFT, 46}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 45}, {8, SHIFT, 46}, },
			{{-1, REDUCE, 42}, {17, SHIFT, 93}, },
			{{-1, ERROR, 88}, {13, SHIFT, 94}, },
			{{-1, ERROR, 89}, {25, SHIFT, 95}, },
			{{-1, ERROR, 90}, {32, SHIFT, 96}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 93}, {5, SHIFT, 22}, {22, SHIFT, 23}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 24}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 97}, {25, SHIFT, 101}, },
			{{-1, ERROR, 98}, {13, SHIFT, 102}, {17, SHIFT, 103}, },
			{{-1, REDUCE, 45}, {0, SHIFT, 45}, {8, SHIFT, 46}, },
			{{-1, ERROR, 100}, {1, SHIFT, 3}, {3, SHIFT, 4}, {6, SHIFT, 5}, {14, SHIFT, 104}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 8}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 103}, {32, SHIFT, 106}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 105}, {1, SHIFT, 3}, {3, SHIFT, 4}, {6, SHIFT, 5}, {14, SHIFT, 107}, {24, SHIFT, 6}, {31, SHIFT, 7}, {32, SHIFT, 8}, {34, SHIFT, 9}, {35, SHIFT, 10}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 1}, },
			{{-1, 2}, {47, 73}, {95, 100}, {101, 105}, },
			{{-1, 11}, },
			{{-1, 12}, {40, 66}, {67, 66}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, },
			{{-1, 25}, {4, 35}, },
			{{-1, 26}, {44, 70}, },
			{{-1, 27}, {6, 37}, {38, 62}, {60, 85}, {64, 86}, {93, 99}, },
			{{-1, 28}, {45, 71}, {46, 72}, },
			{{-1, 29}, {48, 74}, {49, 75}, {50, 76}, {51, 77}, {52, 78}, {53, 79}, },
			{{-1, 30}, {54, 80}, {55, 81}, },
			{{-1, 31}, {56, 82}, {57, 83}, },
			{{-1, 32}, {22, 41}, {23, 42}, {58, 84}, },
			{{-1, 33}, {2, 16}, {73, 16}, {100, 16}, {105, 16}, },
			{{-1, 17}, },
			{{-1, 34}, {2, 18}, {73, 18}, {100, 18}, {105, 18}, },
			{{-1, 87}, },
			{{-1, 88}, },
			{{-1, 19}, },
			{{-1, 67}, },
			{{-1, 68}, {67, 92}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 69}, },
			{{-1, 97}, },
			{{-1, 98}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'do', 'if', 'object', '(', boolean, identifier, number, text, EOF",
			"expecting: EOF",
			"expecting: 'not', '-', '(', boolean, identifier, number, text",
			"expecting: identifier",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', '/', '.', '=', '<', '-', '>', '(', '|[', '||', '+', '^', '*', boolean, identifier, number, text, EOF",
			"expecting: ':=', '.', '|['",
			"expecting: 'do', 'fi', 'if', 'object', 'od', ']', '(', '||', boolean, identifier, number, text, EOF",
			"expecting: '.', '|['",
			"expecting: 'do', 'fi', 'if', 'object', 'od', ']', '.', '(', '|[', '||', boolean, identifier, number, text, EOF",
			"expecting: 'od', '||'",
			"expecting: 'fi', 'od', '||'",
			"expecting: 'and', 'or', '->'",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', '=', '<', '>', '(', '||', boolean, identifier, number, text, EOF",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', '=', '<', '-', '>', '(', '||', '+', boolean, identifier, number, text, EOF",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', '/', '=', '<', '-', '>', '(', '||', '+', '*', boolean, identifier, number, text, EOF",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', '/', '=', '<', '-', '>', '(', '||', '+', '^', '*', boolean, identifier, number, text, EOF",
			"expecting: 'fi', '||'",
			"expecting: ':='",
			"expecting: 'and', 'or', ')'",
			"expecting: identifier, identifierbrace",
			"expecting: 'method', 'object'",
			"expecting: 'do', 'fi', 'if', 'object', 'od', '(', '||', boolean, identifier, number, text",
			"expecting: 'and', 'do', 'fi', 'if', 'object', 'od', 'or', ']', '(', '||', boolean, identifier, number, text, EOF",
			"expecting: 'method', 'object', ']|'",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', ']', ']|', '(', '||', boolean, identifier, number, text, EOF",
			"expecting: 'and', 'do', 'fi', 'if', 'method', 'object', 'od', 'or', '>=', '<=', '->', ')', ']', ']|', ':', ',', '/', '.', '=', '<', '-', '>', '(', '|[', '||', '+', '^', '*', boolean, identifier, number, text, EOF",
			"expecting: ')'",
			"expecting: '['",
			"expecting: 'do', 'if', 'object', ']', '(', boolean, identifier, number, text",
			"expecting: ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 0, 2, 2, 3, 2, 4, 5, 4, 4, 6, 6, 6, 6, 6, 7, 4, 8, 4, 4, 4, 2, 2, 4, 9, 10, 11, 12, 13, 14, 15, 15, 4, 4, 16, 17, 18, 2, 19, 20, 15, 15, 6, 2, 2, 2, 21, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 2, 4, 22, 4, 2, 19, 23, 23, 23, 23, 10, 12, 12, 21, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 24, 18, 25, 26, 27, 3, 4, 23, 2, 25, 28, 29, 27, 29, 18, 28, 28, 27, 3, 23, 28, 29, 23, 
        };*/
}
