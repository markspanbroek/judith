/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AAndExpression extends PExpression
{
    private PExpression _expression_;
    private TAndsym _andsym_;
    private PExpression1 _expression1_;

    public AAndExpression()
    {
    }

    public AAndExpression(
        PExpression _expression_,
        TAndsym _andsym_,
        PExpression1 _expression1_)
    {
        setExpression(_expression_);

        setAndsym(_andsym_);

        setExpression1(_expression1_);

    }
    public Object clone()
    {
        return new AAndExpression(
            (PExpression) cloneNode(_expression_),
            (TAndsym) cloneNode(_andsym_),
            (PExpression1) cloneNode(_expression1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndExpression(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TAndsym getAndsym()
    {
        return _andsym_;
    }

    public void setAndsym(TAndsym node)
    {
        if(_andsym_ != null)
        {
            _andsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _andsym_ = node;
    }

    public PExpression1 getExpression1()
    {
        return _expression1_;
    }

    public void setExpression1(PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression1_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_andsym_)
            + toString(_expression1_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_andsym_ == child)
        {
            _andsym_ = null;
            return;
        }

        if(_expression1_ == child)
        {
            _expression1_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_andsym_ == oldChild)
        {
            setAndsym((TAndsym) newChild);
            return;
        }

        if(_expression1_ == oldChild)
        {
            setExpression1((PExpression1) newChild);
            return;
        }

    }
}
