/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class ABraces extends PBraces
{
    private TOpenbrace _openbrace_;
    private PExpression _expression_;
    private TClosebrace _closebrace_;

    public ABraces()
    {
    }

    public ABraces(
        TOpenbrace _openbrace_,
        PExpression _expression_,
        TClosebrace _closebrace_)
    {
        setOpenbrace(_openbrace_);

        setExpression(_expression_);

        setClosebrace(_closebrace_);

    }
    public Object clone()
    {
        return new ABraces(
            (TOpenbrace) cloneNode(_openbrace_),
            (PExpression) cloneNode(_expression_),
            (TClosebrace) cloneNode(_closebrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABraces(this);
    }

    public TOpenbrace getOpenbrace()
    {
        return _openbrace_;
    }

    public void setOpenbrace(TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _openbrace_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TClosebrace getClosebrace()
    {
        return _closebrace_;
    }

    public void setClosebrace(TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closebrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_openbrace_)
            + toString(_expression_)
            + toString(_closebrace_);
    }

    void removeChild(Node child)
    {
        if(_openbrace_ == child)
        {
            _openbrace_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_closebrace_ == child)
        {
            _closebrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_openbrace_ == oldChild)
        {
            setOpenbrace((TOpenbrace) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_closebrace_ == oldChild)
        {
            setClosebrace((TClosebrace) newChild);
            return;
        }

    }
}
