/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AStarExpression3 extends PExpression3
{
    private PExpression3 _expression3_;
    private TTimes _times_;
    private PExpression4 _expression4_;

    public AStarExpression3()
    {
    }

    public AStarExpression3(
        PExpression3 _expression3_,
        TTimes _times_,
        PExpression4 _expression4_)
    {
        setExpression3(_expression3_);

        setTimes(_times_);

        setExpression4(_expression4_);

    }
    public Object clone()
    {
        return new AStarExpression3(
            (PExpression3) cloneNode(_expression3_),
            (TTimes) cloneNode(_times_),
            (PExpression4) cloneNode(_expression4_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStarExpression3(this);
    }

    public PExpression3 getExpression3()
    {
        return _expression3_;
    }

    public void setExpression3(PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression3_ = node;
    }

    public TTimes getTimes()
    {
        return _times_;
    }

    public void setTimes(TTimes node)
    {
        if(_times_ != null)
        {
            _times_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _times_ = node;
    }

    public PExpression4 getExpression4()
    {
        return _expression4_;
    }

    public void setExpression4(PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression4_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression3_)
            + toString(_times_)
            + toString(_expression4_);
    }

    void removeChild(Node child)
    {
        if(_expression3_ == child)
        {
            _expression3_ = null;
            return;
        }

        if(_times_ == child)
        {
            _times_ = null;
            return;
        }

        if(_expression4_ == child)
        {
            _expression4_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression3_ == oldChild)
        {
            setExpression3((PExpression3) newChild);
            return;
        }

        if(_times_ == oldChild)
        {
            setTimes((TTimes) newChild);
            return;
        }

        if(_expression4_ == oldChild)
        {
            setExpression4((PExpression4) newChild);
            return;
        }

    }
}
