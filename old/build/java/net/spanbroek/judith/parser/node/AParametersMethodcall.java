/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AParametersMethodcall extends PMethodcall
{
    private PExpression6 _expression6_;
    private TDot _dot_;
    private TIdentifierbrace _identifierbrace_;
    private PExpressions _expressions_;

    public AParametersMethodcall()
    {
    }

    public AParametersMethodcall(
        PExpression6 _expression6_,
        TDot _dot_,
        TIdentifierbrace _identifierbrace_,
        PExpressions _expressions_)
    {
        setExpression6(_expression6_);

        setDot(_dot_);

        setIdentifierbrace(_identifierbrace_);

        setExpressions(_expressions_);

    }
    public Object clone()
    {
        return new AParametersMethodcall(
            (PExpression6) cloneNode(_expression6_),
            (TDot) cloneNode(_dot_),
            (TIdentifierbrace) cloneNode(_identifierbrace_),
            (PExpressions) cloneNode(_expressions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParametersMethodcall(this);
    }

    public PExpression6 getExpression6()
    {
        return _expression6_;
    }

    public void setExpression6(PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression6_ = node;
    }

    public TDot getDot()
    {
        return _dot_;
    }

    public void setDot(TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _dot_ = node;
    }

    public TIdentifierbrace getIdentifierbrace()
    {
        return _identifierbrace_;
    }

    public void setIdentifierbrace(TIdentifierbrace node)
    {
        if(_identifierbrace_ != null)
        {
            _identifierbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifierbrace_ = node;
    }

    public PExpressions getExpressions()
    {
        return _expressions_;
    }

    public void setExpressions(PExpressions node)
    {
        if(_expressions_ != null)
        {
            _expressions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expressions_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression6_)
            + toString(_dot_)
            + toString(_identifierbrace_)
            + toString(_expressions_);
    }

    void removeChild(Node child)
    {
        if(_expression6_ == child)
        {
            _expression6_ = null;
            return;
        }

        if(_dot_ == child)
        {
            _dot_ = null;
            return;
        }

        if(_identifierbrace_ == child)
        {
            _identifierbrace_ = null;
            return;
        }

        if(_expressions_ == child)
        {
            _expressions_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression6_ == oldChild)
        {
            setExpression6((PExpression6) newChild);
            return;
        }

        if(_dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(_identifierbrace_ == oldChild)
        {
            setIdentifierbrace((TIdentifierbrace) newChild);
            return;
        }

        if(_expressions_ == oldChild)
        {
            setExpressions((PExpressions) newChild);
            return;
        }

    }
}
