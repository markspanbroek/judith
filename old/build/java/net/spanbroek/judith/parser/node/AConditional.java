/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AConditional extends PConditional
{
    private PExpression _expression_;
    private TArrow _arrow_;
    private PStatements _statements_;

    public AConditional()
    {
    }

    public AConditional(
        PExpression _expression_,
        TArrow _arrow_,
        PStatements _statements_)
    {
        setExpression(_expression_);

        setArrow(_arrow_);

        setStatements(_statements_);

    }
    public Object clone()
    {
        return new AConditional(
            (PExpression) cloneNode(_expression_),
            (TArrow) cloneNode(_arrow_),
            (PStatements) cloneNode(_statements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditional(this);
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public TArrow getArrow()
    {
        return _arrow_;
    }

    public void setArrow(TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _arrow_ = node;
    }

    public PStatements getStatements()
    {
        return _statements_;
    }

    public void setStatements(PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statements_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression_)
            + toString(_arrow_)
            + toString(_statements_);
    }

    void removeChild(Node child)
    {
        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

        if(_arrow_ == child)
        {
            _arrow_ = null;
            return;
        }

        if(_statements_ == child)
        {
            _statements_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(_arrow_ == oldChild)
        {
            setArrow((TArrow) newChild);
            return;
        }

        if(_statements_ == oldChild)
        {
            setStatements((PStatements) newChild);
            return;
        }

    }
}
