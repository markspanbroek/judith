/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AExpressions extends PExpressions
{
    private PExpressionlist _expressionlist_;
    private TClosebrace _closebrace_;

    public AExpressions()
    {
    }

    public AExpressions(
        PExpressionlist _expressionlist_,
        TClosebrace _closebrace_)
    {
        setExpressionlist(_expressionlist_);

        setClosebrace(_closebrace_);

    }
    public Object clone()
    {
        return new AExpressions(
            (PExpressionlist) cloneNode(_expressionlist_),
            (TClosebrace) cloneNode(_closebrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressions(this);
    }

    public PExpressionlist getExpressionlist()
    {
        return _expressionlist_;
    }

    public void setExpressionlist(PExpressionlist node)
    {
        if(_expressionlist_ != null)
        {
            _expressionlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expressionlist_ = node;
    }

    public TClosebrace getClosebrace()
    {
        return _closebrace_;
    }

    public void setClosebrace(TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closebrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expressionlist_)
            + toString(_closebrace_);
    }

    void removeChild(Node child)
    {
        if(_expressionlist_ == child)
        {
            _expressionlist_ = null;
            return;
        }

        if(_closebrace_ == child)
        {
            _closebrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expressionlist_ == oldChild)
        {
            setExpressionlist((PExpressionlist) newChild);
            return;
        }

        if(_closebrace_ == oldChild)
        {
            setClosebrace((TClosebrace) newChild);
            return;
        }

    }
}
