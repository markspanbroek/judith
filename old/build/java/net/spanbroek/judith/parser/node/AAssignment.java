/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AAssignment extends PAssignment
{
    private TIdentifier _identifier_;
    private TBecomes _becomes_;
    private PExpression _expression_;

    public AAssignment()
    {
    }

    public AAssignment(
        TIdentifier _identifier_,
        TBecomes _becomes_,
        PExpression _expression_)
    {
        setIdentifier(_identifier_);

        setBecomes(_becomes_);

        setExpression(_expression_);

    }
    public Object clone()
    {
        return new AAssignment(
            (TIdentifier) cloneNode(_identifier_),
            (TBecomes) cloneNode(_becomes_),
            (PExpression) cloneNode(_expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignment(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TBecomes getBecomes()
    {
        return _becomes_;
    }

    public void setBecomes(TBecomes node)
    {
        if(_becomes_ != null)
        {
            _becomes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _becomes_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_becomes_)
            + toString(_expression_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_becomes_ == child)
        {
            _becomes_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_becomes_ == oldChild)
        {
            setBecomes((TBecomes) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

    }
}
