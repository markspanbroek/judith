/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AMultipleAlterationparts extends PAlterationparts
{
    private PAlterationparts _alterationparts_;
    private PAlterationpart _alterationpart_;

    public AMultipleAlterationparts()
    {
    }

    public AMultipleAlterationparts(
        PAlterationparts _alterationparts_,
        PAlterationpart _alterationpart_)
    {
        setAlterationparts(_alterationparts_);

        setAlterationpart(_alterationpart_);

    }
    public Object clone()
    {
        return new AMultipleAlterationparts(
            (PAlterationparts) cloneNode(_alterationparts_),
            (PAlterationpart) cloneNode(_alterationpart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleAlterationparts(this);
    }

    public PAlterationparts getAlterationparts()
    {
        return _alterationparts_;
    }

    public void setAlterationparts(PAlterationparts node)
    {
        if(_alterationparts_ != null)
        {
            _alterationparts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _alterationparts_ = node;
    }

    public PAlterationpart getAlterationpart()
    {
        return _alterationpart_;
    }

    public void setAlterationpart(PAlterationpart node)
    {
        if(_alterationpart_ != null)
        {
            _alterationpart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _alterationpart_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_alterationparts_)
            + toString(_alterationpart_);
    }

    void removeChild(Node child)
    {
        if(_alterationparts_ == child)
        {
            _alterationparts_ = null;
            return;
        }

        if(_alterationpart_ == child)
        {
            _alterationpart_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_alterationparts_ == oldChild)
        {
            setAlterationparts((PAlterationparts) newChild);
            return;
        }

        if(_alterationpart_ == oldChild)
        {
            setAlterationpart((PAlterationpart) newChild);
            return;
        }

    }
}
