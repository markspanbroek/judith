/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AIdentifiers extends PIdentifiers
{
    private PIdentifierlist _identifierlist_;
    private TClosebrace _closebrace_;

    public AIdentifiers()
    {
    }

    public AIdentifiers(
        PIdentifierlist _identifierlist_,
        TClosebrace _closebrace_)
    {
        setIdentifierlist(_identifierlist_);

        setClosebrace(_closebrace_);

    }
    public Object clone()
    {
        return new AIdentifiers(
            (PIdentifierlist) cloneNode(_identifierlist_),
            (TClosebrace) cloneNode(_closebrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentifiers(this);
    }

    public PIdentifierlist getIdentifierlist()
    {
        return _identifierlist_;
    }

    public void setIdentifierlist(PIdentifierlist node)
    {
        if(_identifierlist_ != null)
        {
            _identifierlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifierlist_ = node;
    }

    public TClosebrace getClosebrace()
    {
        return _closebrace_;
    }

    public void setClosebrace(TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closebrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifierlist_)
            + toString(_closebrace_);
    }

    void removeChild(Node child)
    {
        if(_identifierlist_ == child)
        {
            _identifierlist_ = null;
            return;
        }

        if(_closebrace_ == child)
        {
            _closebrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifierlist_ == oldChild)
        {
            setIdentifierlist((PIdentifierlist) newChild);
            return;
        }

        if(_closebrace_ == oldChild)
        {
            setClosebrace((TClosebrace) newChild);
            return;
        }

    }
}
