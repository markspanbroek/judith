/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AAlteration extends PAlteration
{
    private PExpression6 _expression6_;
    private TOpenobject _openobject_;
    private PAlterationparts _alterationparts_;
    private TCloseobject _closeobject_;

    public AAlteration()
    {
    }

    public AAlteration(
        PExpression6 _expression6_,
        TOpenobject _openobject_,
        PAlterationparts _alterationparts_,
        TCloseobject _closeobject_)
    {
        setExpression6(_expression6_);

        setOpenobject(_openobject_);

        setAlterationparts(_alterationparts_);

        setCloseobject(_closeobject_);

    }
    public Object clone()
    {
        return new AAlteration(
            (PExpression6) cloneNode(_expression6_),
            (TOpenobject) cloneNode(_openobject_),
            (PAlterationparts) cloneNode(_alterationparts_),
            (TCloseobject) cloneNode(_closeobject_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAlteration(this);
    }

    public PExpression6 getExpression6()
    {
        return _expression6_;
    }

    public void setExpression6(PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression6_ = node;
    }

    public TOpenobject getOpenobject()
    {
        return _openobject_;
    }

    public void setOpenobject(TOpenobject node)
    {
        if(_openobject_ != null)
        {
            _openobject_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _openobject_ = node;
    }

    public PAlterationparts getAlterationparts()
    {
        return _alterationparts_;
    }

    public void setAlterationparts(PAlterationparts node)
    {
        if(_alterationparts_ != null)
        {
            _alterationparts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _alterationparts_ = node;
    }

    public TCloseobject getCloseobject()
    {
        return _closeobject_;
    }

    public void setCloseobject(TCloseobject node)
    {
        if(_closeobject_ != null)
        {
            _closeobject_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closeobject_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression6_)
            + toString(_openobject_)
            + toString(_alterationparts_)
            + toString(_closeobject_);
    }

    void removeChild(Node child)
    {
        if(_expression6_ == child)
        {
            _expression6_ = null;
            return;
        }

        if(_openobject_ == child)
        {
            _openobject_ = null;
            return;
        }

        if(_alterationparts_ == child)
        {
            _alterationparts_ = null;
            return;
        }

        if(_closeobject_ == child)
        {
            _closeobject_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression6_ == oldChild)
        {
            setExpression6((PExpression6) newChild);
            return;
        }

        if(_openobject_ == oldChild)
        {
            setOpenobject((TOpenobject) newChild);
            return;
        }

        if(_alterationparts_ == oldChild)
        {
            setAlterationparts((PAlterationparts) newChild);
            return;
        }

        if(_closeobject_ == oldChild)
        {
            setCloseobject((TCloseobject) newChild);
            return;
        }

    }
}
