/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AParametersMethod extends PMethod
{
    private TMethodsym _methodsym_;
    private TIdentifierbrace _identifierbrace_;
    private PIdentifiers _identifiers_;
    private TOpenbracket _openbracket_;
    private PStatements _statements_;
    private TClosebracket _closebracket_;

    public AParametersMethod()
    {
    }

    public AParametersMethod(
        TMethodsym _methodsym_,
        TIdentifierbrace _identifierbrace_,
        PIdentifiers _identifiers_,
        TOpenbracket _openbracket_,
        PStatements _statements_,
        TClosebracket _closebracket_)
    {
        setMethodsym(_methodsym_);

        setIdentifierbrace(_identifierbrace_);

        setIdentifiers(_identifiers_);

        setOpenbracket(_openbracket_);

        setStatements(_statements_);

        setClosebracket(_closebracket_);

    }
    public Object clone()
    {
        return new AParametersMethod(
            (TMethodsym) cloneNode(_methodsym_),
            (TIdentifierbrace) cloneNode(_identifierbrace_),
            (PIdentifiers) cloneNode(_identifiers_),
            (TOpenbracket) cloneNode(_openbracket_),
            (PStatements) cloneNode(_statements_),
            (TClosebracket) cloneNode(_closebracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParametersMethod(this);
    }

    public TMethodsym getMethodsym()
    {
        return _methodsym_;
    }

    public void setMethodsym(TMethodsym node)
    {
        if(_methodsym_ != null)
        {
            _methodsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _methodsym_ = node;
    }

    public TIdentifierbrace getIdentifierbrace()
    {
        return _identifierbrace_;
    }

    public void setIdentifierbrace(TIdentifierbrace node)
    {
        if(_identifierbrace_ != null)
        {
            _identifierbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifierbrace_ = node;
    }

    public PIdentifiers getIdentifiers()
    {
        return _identifiers_;
    }

    public void setIdentifiers(PIdentifiers node)
    {
        if(_identifiers_ != null)
        {
            _identifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifiers_ = node;
    }

    public TOpenbracket getOpenbracket()
    {
        return _openbracket_;
    }

    public void setOpenbracket(TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _openbracket_ = node;
    }

    public PStatements getStatements()
    {
        return _statements_;
    }

    public void setStatements(PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statements_ = node;
    }

    public TClosebracket getClosebracket()
    {
        return _closebracket_;
    }

    public void setClosebracket(TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _closebracket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_methodsym_)
            + toString(_identifierbrace_)
            + toString(_identifiers_)
            + toString(_openbracket_)
            + toString(_statements_)
            + toString(_closebracket_);
    }

    void removeChild(Node child)
    {
        if(_methodsym_ == child)
        {
            _methodsym_ = null;
            return;
        }

        if(_identifierbrace_ == child)
        {
            _identifierbrace_ = null;
            return;
        }

        if(_identifiers_ == child)
        {
            _identifiers_ = null;
            return;
        }

        if(_openbracket_ == child)
        {
            _openbracket_ = null;
            return;
        }

        if(_statements_ == child)
        {
            _statements_ = null;
            return;
        }

        if(_closebracket_ == child)
        {
            _closebracket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_methodsym_ == oldChild)
        {
            setMethodsym((TMethodsym) newChild);
            return;
        }

        if(_identifierbrace_ == oldChild)
        {
            setIdentifierbrace((TIdentifierbrace) newChild);
            return;
        }

        if(_identifiers_ == oldChild)
        {
            setIdentifiers((PIdentifiers) newChild);
            return;
        }

        if(_openbracket_ == oldChild)
        {
            setOpenbracket((TOpenbracket) newChild);
            return;
        }

        if(_statements_ == oldChild)
        {
            setStatements((PStatements) newChild);
            return;
        }

        if(_closebracket_ == oldChild)
        {
            setClosebracket((TClosebracket) newChild);
            return;
        }

    }
}
