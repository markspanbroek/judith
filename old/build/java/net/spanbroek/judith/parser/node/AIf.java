/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AIf extends PIf
{
    private TIfsym _ifsym_;
    private PConditionals _conditionals_;
    private TFisym _fisym_;

    public AIf()
    {
    }

    public AIf(
        TIfsym _ifsym_,
        PConditionals _conditionals_,
        TFisym _fisym_)
    {
        setIfsym(_ifsym_);

        setConditionals(_conditionals_);

        setFisym(_fisym_);

    }
    public Object clone()
    {
        return new AIf(
            (TIfsym) cloneNode(_ifsym_),
            (PConditionals) cloneNode(_conditionals_),
            (TFisym) cloneNode(_fisym_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIf(this);
    }

    public TIfsym getIfsym()
    {
        return _ifsym_;
    }

    public void setIfsym(TIfsym node)
    {
        if(_ifsym_ != null)
        {
            _ifsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ifsym_ = node;
    }

    public PConditionals getConditionals()
    {
        return _conditionals_;
    }

    public void setConditionals(PConditionals node)
    {
        if(_conditionals_ != null)
        {
            _conditionals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conditionals_ = node;
    }

    public TFisym getFisym()
    {
        return _fisym_;
    }

    public void setFisym(TFisym node)
    {
        if(_fisym_ != null)
        {
            _fisym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _fisym_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_ifsym_)
            + toString(_conditionals_)
            + toString(_fisym_);
    }

    void removeChild(Node child)
    {
        if(_ifsym_ == child)
        {
            _ifsym_ = null;
            return;
        }

        if(_conditionals_ == child)
        {
            _conditionals_ = null;
            return;
        }

        if(_fisym_ == child)
        {
            _fisym_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_ifsym_ == oldChild)
        {
            setIfsym((TIfsym) newChild);
            return;
        }

        if(_conditionals_ == oldChild)
        {
            setConditionals((PConditionals) newChild);
            return;
        }

        if(_fisym_ == oldChild)
        {
            setFisym((TFisym) newChild);
            return;
        }

    }
}
