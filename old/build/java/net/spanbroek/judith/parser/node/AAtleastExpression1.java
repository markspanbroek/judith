/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.spanbroek.judith.parser.node;

import java.util.*;
import net.spanbroek.judith.parser.analysis.*;

public final class AAtleastExpression1 extends PExpression1
{
    private PExpression1 _expression1_;
    private TAtleast _atleast_;
    private PExpression2 _expression2_;

    public AAtleastExpression1()
    {
    }

    public AAtleastExpression1(
        PExpression1 _expression1_,
        TAtleast _atleast_,
        PExpression2 _expression2_)
    {
        setExpression1(_expression1_);

        setAtleast(_atleast_);

        setExpression2(_expression2_);

    }
    public Object clone()
    {
        return new AAtleastExpression1(
            (PExpression1) cloneNode(_expression1_),
            (TAtleast) cloneNode(_atleast_),
            (PExpression2) cloneNode(_expression2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAtleastExpression1(this);
    }

    public PExpression1 getExpression1()
    {
        return _expression1_;
    }

    public void setExpression1(PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression1_ = node;
    }

    public TAtleast getAtleast()
    {
        return _atleast_;
    }

    public void setAtleast(TAtleast node)
    {
        if(_atleast_ != null)
        {
            _atleast_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _atleast_ = node;
    }

    public PExpression2 getExpression2()
    {
        return _expression2_;
    }

    public void setExpression2(PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expression1_)
            + toString(_atleast_)
            + toString(_expression2_);
    }

    void removeChild(Node child)
    {
        if(_expression1_ == child)
        {
            _expression1_ = null;
            return;
        }

        if(_atleast_ == child)
        {
            _atleast_ = null;
            return;
        }

        if(_expression2_ == child)
        {
            _expression2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expression1_ == oldChild)
        {
            setExpression1((PExpression1) newChild);
            return;
        }

        if(_atleast_ == oldChild)
        {
            setAtleast((TAtleast) newChild);
            return;
        }

        if(_expression2_ == oldChild)
        {
            setExpression2((PExpression2) newChild);
            return;
        }

    }
}
